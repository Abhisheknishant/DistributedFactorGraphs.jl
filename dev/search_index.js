var documenterSearchIndex = {"docs":
[{"location":"BuildingGraphs/#Creating-Graphs-1","page":"Building Graphs","title":"Creating Graphs","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In this section constructing DFG graphs will be discussed. To start, bring DistributedFactorGraphs into your workspace:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using DistributedFactorGraphs","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"We recommend using IncrementalInference (IIF) to populate DFG graphs. DFG provides the structure, but IIF overloads the provided addVariable! and addFactor! functions and creates solver-specific data that allows the graph to be solved. So although you can use DFG's addVariable! and addFactor!, it is better to start with IIF's functions so that the graph is solvable.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"So for the following examples, IncrementalInference will be used to create the variables and factors. It should be added and imported to run the examples:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using Pkg\nPkg.add(\"IncrementalInference\")\nusing IncrementalInference","category":"page"},{"location":"BuildingGraphs/#Initializing-a-Graph-1","page":"Building Graphs","title":"Initializing a Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG graphs can be built using various drivers (different representations of the underlying graph). At the moment DFG supports 3 drivers:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"GraphsDFG: An in-memory graph that uses Graphs.jl for representing the graph.\nLightDFG: An in-memory graph that uses LightGraphs.jl for representing the graph.\nCloudGraphs: A database-driven graph that uses Neo4j.jl for interacting with the graph.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In general the first two are used for building and solving graphs, and CloudGraphs is used for persisting in-memory graphs into a database. In the long term we recommend using the LightDFG driver for in-memory operation because Graphs.jl is not actively supported and over time that driver may be deprecated.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To continue the example, run one of the following to create a DFG driver:","category":"page"},{"location":"BuildingGraphs/#Creating-a-GraphsDFG-Graph-1","page":"Building Graphs","title":"Creating a GraphsDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with default solver parameters using the Graphs.jl driver.\ndfg = GraphsDFG{SolverParams}(params=SolverParams())","category":"page"},{"location":"BuildingGraphs/#Creating-a-LightDFG-Graph-1","page":"Building Graphs","title":"Creating a LightDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(params=SolverParams())","category":"page"},{"location":"BuildingGraphs/#Creating-a-CloudGraphsDFG-Graph-1","page":"Building Graphs","title":"Creating a CloudGraphsDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with no solver parameters (just to demonstrate the difference) using the CloudGraphs driver, and connect it to a local Neo4j instance.\ndfg = CloudGraphsDFG{NoSolverParams}(\"localhost\", 7474, \"neo4j\", \"test\",\n                                \"testUser\", \"testRobot\", \"testSession\",\n                                nothing,\n                                nothing,\n                                IncrementalInference.decodePackedType,\n                                IncrementalInference.rebuildFactorMetadata!)","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-and-Factors-1","page":"Building Graphs","title":"Creating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG and IIF rely on a CRUD (Create, Read, Update, and Delete) interface to allow users to create and edit graphs.","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-with-IIF-1","page":"Building Graphs","title":"Creating Variables with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables are added using IncrementalInference's addVariable! function. To create the variable, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe variable's label (e.g. :x1 or :a)\nThe variable inference type (aka soft type), which is a subtype of InferenceVariable","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Once variables are initialized to a specific soft type, variable node data (solver data) is templated to that type. ","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In addition, the following optional parameters are provided:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additional labels for the variable (in DFG these are referred to as tags)\nA solvable flag to indicate whether the variable is ready to be added to a solution","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Three variables are added:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"v1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)","category":"page"},{"location":"BuildingGraphs/#Creating-Factors-with-IIF-1","page":"Building Graphs","title":"Creating Factors with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Similarly to variables, it is recommended that users start with the IIF implementation of the addFactor! functions to create factors. To create the factors, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe labels for the variables that the factor is linking\nThe factor function (which is a subtype of )","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additionally, the solvable flag is also set to indicate that the factor can be used in solving graphs.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Every graph requires a prior for it to be solvable, so it is a good practice to make sure one is added (generally by adding to the first variable in the graph).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Four factors are added: a prior, a linear conditional relationship with a normal distribution between x0 and x1, and a pair of linear conditional relationships between each pose and the landmark.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"prior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The produced factor graph is:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(Image: imgs/initialgraph.jpg)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(For more information on producing plots of the graph, please refer to the Drawing Graphs section).","category":"page"},{"location":"BuildingGraphs/#Listing-Variables-and-Factors-1","page":"Building Graphs","title":"Listing Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Reading, updating, and deleting all use DFG functions (as opposed to adding, where using the IncrementalInference functions are recommended).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Each variable and factor is uniquely identified by its label. The list of variable and factor labels can be retrieved with the ls/getVariableIds and lsf/getFactorIds functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariableIds\nls","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.ls","page":"Building Graphs","title":"DistributedFactorGraphs.ls","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor.\n\n\n\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getFactorIds\nlsf","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.lsf","page":"Building Graphs","title":"DistributedFactorGraphs.lsf","text":"lsf(dfg)\nlsf(dfg, regexFilter; solvable)\n\n\nList the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\nlsf(dfg)\nlsf(dfg, label; solvable)\n\n\nAlias for getNeighbors - returns neighbors around a given node label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To list all variables or factors (instead of just their labels), use the getVariables and getFactors functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariables\ngetFactors","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getVariables","page":"Building Graphs","title":"DistributedFactorGraphs.getVariables","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getFactors","page":"Building Graphs","title":"DistributedFactorGraphs.getFactors","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: getNeighbors is also worth mentioning at this point as it is a simple way to find the bigraph relationships. More information on this and other ways to retrieve filtered lists of variables/factors (an area that's currently WIP in DFG) can be found in Traversing and Querying.  ","category":"page"},{"location":"BuildingGraphs/#Getting-(Reading)-Variables-and-Factors-1","page":"Building Graphs","title":"Getting (Reading) Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Individual variables and factors can be retrieved from their labels using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariable","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getVariable","page":"Building Graphs","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label)\n\n\nGet a DFGVariable from a DFG using its label.\n\n\n\n\n\ngetVariable(dfg, label, solveKey)\n\n\nGet a DFGVariable with a specific solver key. In memory types still return a reference, other types returns a variable with only solveKey.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getFactor","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getFactor","page":"Building Graphs","title":"DistributedFactorGraphs.getFactor","text":"Get a DFGFactor from a DFG using its label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"It is worth noting that getVariable allows a user to retrieve only a single solver entry, so that subsets of the solver data can be retrieved individually (say, in the case that there are many solutions). These can then be updated independently using the functions as discussed in the update section below.","category":"page"},{"location":"BuildingGraphs/#Updating-Variables-and-Factors-1","page":"Building Graphs","title":"Updating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Full variables and factors can be updated using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"updateVariable!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.updateVariable!","page":"Building Graphs","title":"DistributedFactorGraphs.updateVariable!","text":"Update a complete DFGVariable in the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"updateFactor!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.updateFactor!","page":"Building Graphs","title":"DistributedFactorGraphs.updateFactor!","text":"Update a complete DFGFactor in the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Skeleton and summary variables are read-only. To perform updates you should use the full factors and variables.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: updateVariable/updateFactor performs a complete update of the respective node. It's not a very efficient way to edit fine-grain detail. There are other methods to perform smaller in-place changes. This is discussed in more detail in Data Structure.","category":"page"},{"location":"BuildingGraphs/#Deleting-Variables-and-Factors-1","page":"Building Graphs","title":"Deleting Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables and factors can be deleted using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"deleteVariable!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.deleteVariable!","page":"Building Graphs","title":"DistributedFactorGraphs.deleteVariable!","text":"Delete a DFGVariable from the DFG using its label.\n\n\n\n\n\ndeleteVariable!(dfg, variable)\n\n\nDelete a referenced DFGVariable from the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"deleteFactor!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.deleteFactor!","page":"Building Graphs","title":"DistributedFactorGraphs.deleteFactor!","text":"Delete a DFGFactor from the DFG using its label.\n\n\n\n\n\ndeleteFactor!(dfg, factor)\n\n\nDelete the referened DFGFactor from the DFG.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Function-Reference-1","page":"Reference","title":"Function Reference","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"Pages = [\n    \"func_ref.md\"\n]\nDepth = 3","category":"page"},{"location":"func_ref/#Graph-Types-1","page":"Reference","title":"Graph Types","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"GraphsDFG","category":"page"},{"location":"func_ref/#Creating-DFG-Factor-Graphs-1","page":"Reference","title":"Creating DFG Factor Graphs","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"addVariable!\naddFactor!","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.addVariable!","page":"Reference","title":"DistributedFactorGraphs.addVariable!","text":"Add a DFGVariable to a DFG.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!","page":"Reference","title":"DistributedFactorGraphs.addFactor!","text":"Add a DFGFactor to a DFG.\n\naddFactor!(dfg, factor)\n\n\n\n\n\n\naddFactor!(dfg, variables, factor)\n\n\n\n\n\n\naddFactor!(dfg, variableLabels, factor)\n\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Getting-Factor-Graph-Nodes-1","page":"Reference","title":"Getting Factor Graph Nodes","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"getVariables\ngetFactors\ngetVariable\ngetFactor\ngetNeighbors\nls\nlsf","category":"page"},{"location":"func_ref/#Updating-Factor-Graph-Nodes-1","page":"Reference","title":"Updating Factor Graph Nodes","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"updateVariable!\nupdateFactor!","category":"page"},{"location":"func_ref/#Deleting-Factor-Graph-Nodes-1","page":"Reference","title":"Deleting Factor Graph Nodes","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"deleteVariable!\ndeleteFactor!","category":"page"},{"location":"func_ref/#Getting-Adjacency-Matrix-1","page":"Reference","title":"Getting Adjacency Matrix","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"getIncidenceMatrix\ngetIncidenceMatrixSparse","category":"page"},{"location":"func_ref/#Validating-Factor-Graph-Connectivity-1","page":"Reference","title":"Validating Factor Graph Connectivity","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"isFullyConnected\nhasOrphans","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.isFullyConnected","page":"Reference","title":"DistributedFactorGraphs.isFullyConnected","text":"Checks if the graph is fully connected, returns true if so.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.hasOrphans","page":"Reference","title":"DistributedFactorGraphs.hasOrphans","text":"Checks if the graph is not fully connected, returns true if it is not contiguous.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Copying-Subgraphs-1","page":"Reference","title":"Copying Subgraphs","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"getSubgraphAroundNode\ngetSubgraph","category":"page"},{"location":"func_ref/#Summaries-1","page":"Reference","title":"Summaries","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"getSummary\ngetSummaryGraph","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.getSummary","page":"Reference","title":"DistributedFactorGraphs.getSummary","text":"Get a summary of the graph (first-class citizens of variables and factors). Returns a AbstractDFGSummary.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getSummaryGraph","page":"Reference","title":"DistributedFactorGraphs.getSummaryGraph","text":"Get a summary graph (first-class citizens of variables and factors) with the same structure as the original graph. Note this is a copy of the original. Returns a LightDFG{NoSolverParams, DFGVariableSummary, DFGFactorSummary}.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Visualization-and-Plotting-1","page":"Reference","title":"Visualization and Plotting","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"toDot\ntoDotFile\ndfgplot","category":"page"},{"location":"SavingData/#Saving-and-Loading-Graphs-1","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"","category":"section"},{"location":"SavingData/#","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"Data can be saved and loaded from disk using FileDFG.","category":"page"},{"location":"SavingData/#Saving-Data-1","page":"Saving and Loading Graphs","title":"Saving Data","text":"","category":"section"},{"location":"SavingData/#Loading-Data-1","page":"Saving and Loading Graphs","title":"Loading Data","text":"","category":"section"},{"location":"apis/graphs/#The-Graphs.jl-DistributedFactorGraph-API-1","page":"Graphs.jl","title":"The Graphs.jl DistributedFactorGraph API","text":"","category":"section"},{"location":"DrawingGraphs/#Drawing-Graphs-1","page":"Drawing Graphs","title":"Drawing Graphs","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Graphs can be visualized by using either GraphPlot or rendering to .dot files (which can be viewed using xdot).","category":"page"},{"location":"DrawingGraphs/#GraphPlot-1","page":"Drawing Graphs","title":"GraphPlot","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"GraphPlot plotting is available if GraphPlot is imported before DFG is imported. Install GraphPlot using the following command:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using Pkg\nPkg.install(\"GraphPlot\")","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Then bring GraphPlot in before DFG:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using GraphPlot\nusing DistributedFactorGraphs","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Any factor graph can then be drawn by calling dfgPlot:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n\n# Plot graph\ndfgplot(dfg)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"(Image: imgs/initialgraph.jpg)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"dfgplot","category":"page"},{"location":"DrawingGraphs/#Rendering-GraphPlot-to-PDF-1","page":"Drawing Graphs","title":"Rendering GraphPlot to PDF","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"The graph can be rendered to PDF or JPG in the following way:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(dfg))","category":"page"},{"location":"DrawingGraphs/#More-Information-1","page":"Drawing Graphs","title":"More Information","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"More information at GraphPlot.jl","category":"page"},{"location":"DrawingGraphs/#Dot-Files-1","page":"Drawing Graphs","title":"Dot Files","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Dot files are a standard format for visualizing graphs and applications such as xdot are available to view the files. Dot plotting does not require GraphPlot and can be drawn by either:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Calling toDot on any graph to produce a string of the graph\nCalling toDotFile on any graph to save it directly to a dotfile","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using DistributedFactorGraphs\n# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n# Save to dot file\ntoDotFile(dfg, \"/tmp/test.dot\")\n# Open with xdot\nrun(`xdot /tmp/test.dot`)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"toDot\ntoDotFile","category":"page"},{"location":"DrawingGraphs/#DistributedFactorGraphs.toDot","page":"Drawing Graphs","title":"DistributedFactorGraphs.toDot","text":"toDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\ntoDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\n","category":"function"},{"location":"DrawingGraphs/#DistributedFactorGraphs.toDotFile","page":"Drawing Graphs","title":"DistributedFactorGraphs.toDotFile","text":"toDotFile(dfg)\ntoDotFile(dfg, fileName)\n\n\nProduces a dot file of the graph for visualization. Download XDot to see the data\n\nNote\n\nDefault location \"/tmp/dfg.dot\" – MIGHT BE REMOVED\nCan be viewed with the xdot system application.\nBased on graphviz.org\n\n\n\n\n\n","category":"function"},{"location":"DataStructure/#Data-Structure-1","page":"Data Structure","title":"Data Structure","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Variables and factors can potentially contain a lot of data, so DFG has different structures that are specialized for each use-case and level of detail. For example, if you  want to retrieve just a simple summary of the structure, you can use the summary or skeleton structures to identify variables and factors of interest and then retrieve more detail on the subset.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Note that drivers support all of the structures.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"The following section discusses the datastructures for each level. A quick summary of the types and the available properties (some of which are derived) is provided below.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Accessible properties for each of the variable structures:","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"|                     | Label | Timestamp | Tags | Estimates | Soft Type | Solvable | Solver Data | Small Data | Big Data Entries | |––––––––––-|–––-|–––––-|–––|–––––-|–––––-|–––––|––––––-|––––––|–––––––––| | SkeletonDFGVariable | X     |           | X    |           |           |          |             |            |                  | | DFGVariableSummary  | X     | X         | X    | X         | Symbol    |          |             |            | X                | | DFGVariable         | X     | X         | X    | X         | X         | X        | X           | X          | X                |","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Accessible properties for each of the factor structures:","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"|                   | Label | Timestamp | Tags | Factor Type | Solvable | Solver Data | |–––––––––-|–––-|–––––-|–––|––––––-|–––––|––––––-| | SkeletonDFGFactor | X     |           | X    |             |          |             | | DFGFactorSummary  | X     | X         | X    |             |          |             | | DFGFactor         | X     | X         | X    | X           | X        | X           |","category":"page"},{"location":"DataStructure/#DFG-Skeleton-1","page":"Data Structure","title":"DFG Skeleton","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"SkeletonDFGVariable\nSkeletonDFGFactor","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.SkeletonDFGVariable","page":"Data Structure","title":"DistributedFactorGraphs.SkeletonDFGVariable","text":"struct SkeletonDFGVariable <: AbstractDFGVariable\n\nSkeleton variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, addTags!, and deleteTags!\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.SkeletonDFGFactor","page":"Data Structure","title":"DistributedFactorGraphs.SkeletonDFGFactor","text":"struct SkeletonDFGFactor <: AbstractDFGFactor\n\nSkeleton factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, addTags!, and deleteTags!\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DFG-Summary-1","page":"Data Structure","title":"DFG Summary","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"DFGVariableSummary\nDFGFactorSummary","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.DFGVariableSummary","page":"Data Structure","title":"DistributedFactorGraphs.DFGVariableSummary","text":"struct DFGVariableSummary <: AbstractDFGVariable\n\nSummary variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp!\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, addTags!, and deleteTags!\nppeDict::Dict{Symbol,#s22} where #s22<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nsofttypename::Symbol\nSymbol for the softtype for the underlying variable. Accessor: getSofttype\nbigData::Dict{Symbol,AbstractBigDataEntry}\nDictionary of large data associated with this variable. Accessors: addBigDataEntry!, getBigDataEntry, updateBigDataEntry!, and deleteBigDataEntry!\n_internalId::Int64\nInternal ID used by some of the DFG drivers. We don't suggest using this outside of DFG.\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.DFGFactorSummary","page":"Data Structure","title":"DistributedFactorGraphs.DFGFactorSummary","text":"struct DFGFactorSummary <: AbstractDFGFactor\n\nRead-only summary factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, addTags!, and deleteTags!\n_internalId::Int64\nInternal ID used by some of the DFG drivers. We don't suggest using this outside of DFG.\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#Full-DFG-Node-1","page":"Data Structure","title":"Full DFG Node","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"DFGVariable\nDFGFactor","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.DFGVariable","page":"Data Structure","title":"DistributedFactorGraphs.DFGVariable","text":"struct DFGVariable{T<:InferenceVariable} <: AbstractDFGVariable\n\nComplete variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp!\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, addTags!, and deleteTags!\nppeDict::Dict{Symbol,#s16} where #s16<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nsolverDataDict::Dict{Symbol,VariableNodeData{T}} where T<:InferenceVariable\nDictionary of solver data. May be a subset of all solutions if a solver key was specified in the get call. Accessors: addVariableSolverData!, updateVariableSolverData!, and deleteVariableSolverData!\nsmallData::Dict{String,String}\nDictionary of small data associated with this variable. Accessors: addSmallData!, updateSmallData!, and deleteSmallData!\nbigData::Dict{Symbol,AbstractBigDataEntry}\nDictionary of large data associated with this variable. Accessors: addBigDataEntry!, getBigDataEntry, updateBigDataEntry!, and deleteBigDataEntry!\n_dfgNodeParams::DFGNodeParams\nMutable parameters for the variable. We suggest using accessors to get to this data. Accessors: getSolvable, setSolvable!\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.DFGFactor","page":"Data Structure","title":"DistributedFactorGraphs.DFGFactor","text":"mutable struct DFGFactor{T, S} <: AbstractDFGFactor\n\nComplete factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp!\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, addTags!, and deleteTags!\nsolverData::GenericFunctionNodeData\nSolver data. Accessors: getSolverData, setSolverData!\nsolvable::Int64\nSolvable flag for the factor. Accessors: getSolvable, setSolvable! TODO: Switch to DFGNodeParams\n_dfgNodeParams::DFGNodeParams\nMutable parameters for the variable. We suggest using accessors to get to this data. Accessors: getSolvable, setSolvable!\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#Additional-Offloaded-Data-1","page":"Data Structure","title":"Additional Offloaded Data","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Additional, larger data can be associated with variables using keyed big data entries.  ","category":"page"},{"location":"variable_factor_serialization/#Serialization-of-Variables-and-Factors-1","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"If you are transferring variables and factors over a wire you need to serialize and deserialize variables and factors.","category":"page"},{"location":"variable_factor_serialization/#Packing-and-Unpacking-1","page":"Serialization of Variables and Factors","title":"Packing and Unpacking","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Packing is done with the exposed functions packVariable()::Dict{String, Any} and packFactor()::Dict{String, Any}. You can then serialize this into a string or JSON as you would normally.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Note: When you deserialize a factor and want to use it for solving, you must call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor) to reinflate it completely. Please review FileDFG service for an example.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"For example:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Now serialize them:\npVariable = packVariable(dfg, x0)\npFactor = packFactor(dfg, prior)\n\n# And we can deserialize them\nupVariable = unpackVariable(dfg, pVariable)\n# FYI: The graph is used in unpackFactor to find the variables that the factor links to.\nupFactor = unpackFactor(dfg, pFactor, IncrementalInference)\n# Note, you need to call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor)\n# to make it useable. Please add an issue if this poses a problem or causes issues.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"As a more complex example, we can use JSON2 to stringify the data and write it to a folder of files as FileDFG does:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Slightly fancier example: We can use JSON2, we can serialize to a string\nvarFolder = \"/tmp\"\nfor v in getVariables(dfg)\n    vPacked = packVariable(dfg, v)\n    io = open(\"$varFolder/$(v.label).json\", \"w\")\n    JSON2.write(io, vPacked)\n    close(io)\nend\n# Factors\nfor f in getFactors(dfg)\n    fPacked = packFactor(dfg, f)\n    io = open(\"$folder/factors/$(f.label).json\", \"w\")\n    JSON2.write(io, fPacked)\n    close(io)\nend","category":"page"},{"location":"GraphData/#Using-Graph-Elements-1","page":"Using Graph Data","title":"Using Graph Elements","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Variables and factors in DistributedFactorGraphs are used for a variety of different applications. We have tried to compartmentalize the data as much as possible so that users do not need to dig around to find what they need (it's a work in progress).","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"There are three fundamental types of data in DFG:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Variable and factor data (stored in the nodes themselves)\nOffloaded big data elements (keyed in a variable or factor, but stored in another location)\nGraph data (data that is related to the graph itself)","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The following is a guideline to using these parameters.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: Some functions are direct accessors to the internal parameters, others are derived functions (e.g. getLabel(v) = v.label). In other cases the accessors are simplified ways to interact with the structures. We recommend using the accessors as the internal structure may change over time.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: Adds in general throw an error if the element already exists. Update will update the element if it exists, otherwise it will add it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: In general these functions will return an error if the respective element is not found. This is to avoid returning, say, nothing, which will be horribly confusing if you tried getVariableSolverData(dfg, :a, :b) and it returned nothing - which was missing, :a or :b, or was there a communication issue? We recommend coding defensively and trapping errors in critical portions of your user code.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: All data is passed by reference, so if you update the returned structure it will update in the graph. The database driver is an exception, and once the variable or factor is updated you need to call update* to persist the changes to the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The following examples make use this data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"using IncrementalInference\n# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(params=SolverParams())\n\nx0 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nx1 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)","category":"page"},{"location":"GraphData/#Variable-and-Factor-Elements-1","page":"Using Graph Data","title":"Variable and Factor Elements","text":"","category":"section"},{"location":"GraphData/#Common-Elements-1","page":"Using Graph Data","title":"Common Elements","text":"","category":"section"},{"location":"GraphData/#Labels-1","page":"Using Graph Data","title":"Labels","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Labels are the principle identifier of a variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getLabel","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getLabel","page":"Using Graph Data","title":"DistributedFactorGraphs.getLabel","text":"getLabel(v)\n\n\nReturn the label for a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getLabel","category":"page"},{"location":"GraphData/#Timestamps-1","page":"Using Graph Data","title":"Timestamps","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Each variable or factor can have a timestamp associated with it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getTimestamp\nsetTimestamp!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getTimestamp","page":"Using Graph Data","title":"DistributedFactorGraphs.getTimestamp","text":"getTimestamp(v)\n\n\nGet the timestamp from a DFGFactor object.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Tags-1","page":"Using Graph Data","title":"Tags","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Tags are a set of symbols that contain identifiers for the variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"addTag\nmergeTags!\ndeleteTags!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.mergeTags!","page":"Using Graph Data","title":"DistributedFactorGraphs.mergeTags!","text":"mergeTags!(dfg, sym, tags)\n\n\nMerge add tags to a variable or factor (union)\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Solvable-1","page":"Using Graph Data","title":"Solvable","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The solvable flag indicates whether the solver should make use of the variable or factor while solving the graph. This can be used to construct graphs in chunks while solving asynchronously, or for selectively solving portions of the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSolvable\nsetSolvable!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getSolvable","page":"Using Graph Data","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(var)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition.  Useful for ensuring atomic transactions.\n\nRelated:\n\nisSolveInProgress\n\n\n\n\n\ngetSolvable(dfg, sym)\n\n\nGet 'solvable' parameter for either a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setSolvable!","page":"Using Graph Data","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(dfg, sym, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\nsetSolvable!(node, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Variables-1","page":"Using Graph Data","title":"Variables","text":"","category":"section"},{"location":"GraphData/#Soft-Type-1","page":"Using Graph Data","title":"Soft Type","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The soft type is the underlying inference variable type, such as a Pose2.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSofttype","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getSofttype","page":"Using Graph Data","title":"DistributedFactorGraphs.getSofttype","text":"getSofttype(vnd)\n\n\nVariable nodes softtype information holding a variety of meta data associated with the type of variable stored in that node of the factor graph.\n\nRelated\n\ngetVariableType\n\n\n\n\n\ngetSofttype(v)\n\n\nRetrieve the soft type name symbol for a DFGVariableSummary. ie :Point2, Pose2, etc. TODO, DO NOT USE v.softtypename in DFGVariableSummary\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Packed-Parametric-Estimates-1","page":"Using Graph Data","title":"Packed Parametric Estimates","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Solved graphs contain packed parametric estimates for the variables, which are keyed by the solution (the default is saved as :default).","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"For each PPE structure, there are accessors for getting individual values:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getMaxPPE\ngetMeanPPE\ngetSuggestedPPE\ngetPPE","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.getPPE","text":"getPPE(dfg, variablekey)\ngetPPE(dfg, variablekey, ppekey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph for a given solve key.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated getMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\ngetPPE(vari)\ngetPPE(vari, solveKey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated\n\ngetMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Related functions for getting, adding/updating, and deleting PPE structures:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"listPPE\ngetPPE\naddPPE!\nupdatePPE!\ndeletePPE!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.listPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.listPPE","text":"listPPE(dfg, variablekey)\n\n\nList all the PPE data keys in the variable.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.addPPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.addPPE!","text":"addPPE!(dfg, variablekey, ppe)\naddPPE!(dfg, variablekey, ppe, ppekey)\n\n\nAdd variable PPE, errors if it already exists.\n\n\n\n\n\naddPPE!(dfg, sourceVariable)\naddPPE!(dfg, sourceVariable, ppekey)\n\n\nAdd a new PPE entry from a deepcopy of the source variable PPE. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.updatePPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.updatePPE!","text":"Update PPE data if it exists, otherwise add it.\n\n\n\n\n\nupdatePPE!(dfg, sourceVariable)\nupdatePPE!(dfg, sourceVariable, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it. NOTE: Copies the PPE data.\n\n\n\n\n\nupdatePPE!(dfg, sourceVariables)\nupdatePPE!(dfg, sourceVariables, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.deletePPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, variablekey)\ndeletePPE!(dfg, variablekey, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\ndeletePPE!(dfg, sourceVariable)\ndeletePPE!(dfg, sourceVariable, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of PPE operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"# Add a new PPE of type MeanMaxPPE to :x0\nppe = MeanMaxPPE(:default, [0.0], [0.0], [0.0])\naddPPE!(dfg, :x0, ppe)\n@show listPPE(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nv = getPPE(dfg, :x0, :default)\n# Delete it\ndeletePPE!(dfg, :x0, :default)\n# Update add it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Update update it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Bulk copy PPE's for x0 and x1\nupdatePPE!(dfg, [x0], :default)","category":"page"},{"location":"GraphData/#Solver-Data-1","page":"Using Graph Data","title":"Solver Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Solver data is used by IncrementalInference/RoME/Caesar solver to produce the above PPEs.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Related functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"listVariableSolverData\ngetVariableSolverData\naddVariableSolverData!\nupdateVariableSolverData!\ndeleteVariableSolverData!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.listVariableSolverData","page":"Using Graph Data","title":"DistributedFactorGraphs.listVariableSolverData","text":"listVariableSolverData(dfg, variablekey)\n\n\nList all the solver data keys in the variable.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getVariableSolverData","page":"Using Graph Data","title":"DistributedFactorGraphs.getVariableSolverData","text":"getVariableSolverData(dfg, variablekey)\ngetVariableSolverData(dfg, variablekey, solvekey)\n\n\nGet variable solverdata for a given solve key.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.addVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, variablekey, vnd)\naddVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nAdd variable solver data, errors if it already exists.\n\n\n\n\n\naddVariableSolverData!(dfg, sourceVariable)\naddVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nAdd a new solver data  entry from a deepcopy of the source variable solver data. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.updateVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, variablekey, vnd)\nupdateVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\nupdateVariableSolverData!(dfg, sourceVariable)\nupdateVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it. NOTE: Copies the solver data.\n\n\n\n\n\nupdateVariableSolverData!(dfg, sourceVariables)\nupdateVariableSolverData!(dfg, sourceVariables, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, variablekey)\ndeleteVariableSolverData!(dfg, variablekey, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\ndeleteVariableSolverData!(dfg, sourceVariable)\ndeleteVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of solver data operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"# Add new VND of type ContinuousScalar to :x0\n# Could also do VariableNodeData(ContinuousScalar())\nvnd = VariableNodeData{ContinuousScalar}()\naddVariableSolverData!(dfg, :x0, vnd, :parametric)\n@show listVariableSolverData(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nvndBack = getVariableSolverData(dfg, :x0, :parametric)\n# Delete it\ndeleteVariableSolverData!(dfg, :x0, :parametric)","category":"page"},{"location":"GraphData/#Small-Data-1","page":"Using Graph Data","title":"Small Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Small data allows you to assign a dictionary to variables. It is a useful way to keep small amounts of string data in a variable. As it is stored in the graph itself, large entries will slow the graph down, so if data should exceed a few bytes/kb, it should rather be saved in bigData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSmallData,\nsetSmallData!","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setSmallData!(x0, Dict(\"entry\"=>\"entry value\"))\ngetSmallData(x0)","category":"page"},{"location":"GraphData/#Big-Data-1","page":"Using Graph Data","title":"Big Data","text":"","category":"section"},{"location":"GraphData/#Factors-1","page":"Using Graph Data","title":"Factors","text":"","category":"section"},{"location":"GraphData/#Graph-Related-Data-1","page":"Using Graph Data","title":"Graph-Related Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"DFG can store data in the graph itself (as opposed to inside graph elements). When you retrieve graphs from a database, this information is carried along. If you are working with an in-memory graph, the structure is flattened into the graph itself as userData, robotData, and sessionData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Graphs reside inside a hierarchy made up in the following way:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"User1\nRobot1\nSession1 (the graph itself)\nUser2\nRobot2\nRobot3\nSession2\nSession3","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"This data can be retrieved with the follow functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getUserData\ngetRobotData\ngetSessionData","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getUserData","page":"Using Graph Data","title":"DistributedFactorGraphs.getUserData","text":"getUserData(dfg)\n\n\nGet the user data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getRobotData","page":"Using Graph Data","title":"DistributedFactorGraphs.getRobotData","text":"getRobotData(dfg)\n\n\nGet the robot data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getSessionData","page":"Using Graph Data","title":"DistributedFactorGraphs.getSessionData","text":"getSessionData(dfg)\n\n\nGet the session data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"It can be set using the following functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setUserData!\nsetRobotData!\nsetSessionData!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.setUserData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setUserData!","text":"setUserData!(dfg, data)\n\n\nSet the user data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setRobotData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setRobotData!","text":"setRobotData!(dfg, data)\n\n\nSet the robot data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setSessionData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setSessionData!","text":"setSessionData!(dfg, data)\n\n\nSet the session data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of using graph-level data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setUserData!(dfg, Dict(:a => \"Hello\"))\ngetUserData(dfg)","category":"page"},{"location":"variables_and_factors/#Variables-and-Factors-1","page":"Variables and Factors","title":"Variables and Factors","text":"","category":"section"},{"location":"ref_api/#Common-API-Interface-1","page":"Common API Interface","title":"Common API Interface","text":"","category":"section"},{"location":"getting_started/#Getting-Started-1","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"TraversingAndQuerying/#Traversing-and-Querying-a-Graph-1","page":"Traversing and Querying","title":"Traversing and Querying a Graph","text":"","category":"section"},{"location":"TraversingAndQuerying/#","page":"Traversing and Querying","title":"Traversing and Querying","text":"getNeighbors\ngetSubgraphAroundNode\ngetSubgraph\ngetIncidenceMatrix\ngetIncidenceMatrixSparse","category":"page"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getNeighbors","page":"Traversing and Querying","title":"DistributedFactorGraphs.getNeighbors","text":"getNeighbors(dfg, node; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor.\n\n\n\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"function"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getSubgraphAroundNode","page":"Traversing and Querying","title":"DistributedFactorGraphs.getSubgraphAroundNode","text":"getSubgraphAroundNode(dfg, node)\ngetSubgraphAroundNode(dfg, node, distance)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors, addToDFG; solvable)\n\n\nRetrieve a deep subgraph copy around a given variable or factor. Optionally provide a distance to specify the number of edges should be followed. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables. Note: Always returns the node at the center, but filters around it if solvable is set.\n\n\n\n\n\n","category":"function"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getSubgraph","page":"Traversing and Querying","title":"DistributedFactorGraphs.getSubgraph","text":"getSubgraph(dfg, variableFactorLabels)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors, addToDFG)\n\n\nGet a deep subgraph copy from the DFG given a list of variables and factors. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables.\n\n\n\n\n\n","category":"function"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package is a specialized Julia graphing wrapper.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package is not yet registered with JuliaLang/METADATA.jl, but can be easily installed in Julia 0.6 with:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]add https://github.com/GearsAD/GraffSDK.jl.git","category":"page"},{"location":"#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\"\n    \"getting_started.md\"\n    \"variables_and_factors.md\"\n    \"ref_api.md\"\n    \"example.md\"\n    \"func_ref.md\"\n]","category":"page"},{"location":"example/#Example-1","page":"Example","title":"Example","text":"","category":"section"}]
}
