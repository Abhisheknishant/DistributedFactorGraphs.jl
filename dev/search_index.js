var documenterSearchIndex = {"docs":
[{"location":"BuildingGraphs/#Creating-Graphs-1","page":"Building Graphs","title":"Creating Graphs","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In this section constructing DFG graphs will be discussed. To start, bring DistributedFactorGraphs into your workspace:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using DistributedFactorGraphs","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"We recommend using IncrementalInference (IIF) to populate DFG graphs. DFG provides the structure, but IIF overloads the provided addVariable! and addFactor! functions and creates solver-specific data that allows the graph to be solved. So although you can use DFG's addVariable! and addFactor!, it is better to start with IIF's functions so that the graph is solvable.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"So for the following examples, IncrementalInference will be used to create the variables and factors. It should be added and imported to run the examples:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"using Pkg\nPkg.add(\"IncrementalInference\")\nusing IncrementalInference","category":"page"},{"location":"BuildingGraphs/#Initializing-a-Graph-1","page":"Building Graphs","title":"Initializing a Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG graphs can be built using various drivers (different representations of the underlying graph). At the moment DFG supports 3 drivers:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"GraphsDFG: An in-memory graph that uses Graphs.jl for representing the graph.\nLightDFG: An in-memory graph that uses LightGraphs.jl for representing the graph.\nCloudGraphs: A database-driven graph that uses Neo4j.jl for interacting with the graph.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In general the first two are used for building and solving graphs, and CloudGraphs is used for persisting in-memory graphs into a database. In the long term we recommend using the LightDFG driver for in-memory operation because Graphs.jl is not actively supported and over time that driver may be deprecated.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To continue the example, run one of the following to create a DFG driver:","category":"page"},{"location":"BuildingGraphs/#Creating-a-GraphsDFG-Graph-1","page":"Building Graphs","title":"Creating a GraphsDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with default solver parameters using the Graphs.jl driver.\ndfg = GraphsDFG{SolverParams}(params=SolverParams())","category":"page"},{"location":"BuildingGraphs/#Creating-a-LightDFG-Graph-1","page":"Building Graphs","title":"Creating a LightDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(params=SolverParams())","category":"page"},{"location":"BuildingGraphs/#Creating-a-CloudGraphsDFG-Graph-1","page":"Building Graphs","title":"Creating a CloudGraphsDFG Graph","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"# Create a DFG with no solver parameters (just to demonstrate the difference) using the CloudGraphs driver, and connect it to a local Neo4j instance.\ndfg = CloudGraphsDFG{NoSolverParams}(\"localhost\", 7474, \"neo4j\", \"test\",\n                                \"testUser\", \"testRobot\", \"testSession\",\n                                nothing,\n                                nothing,\n                                IncrementalInference.decodePackedType,\n                                IncrementalInference.rebuildFactorMetadata!)","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-and-Factors-1","page":"Building Graphs","title":"Creating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"DFG and IIF rely on a CRUD (Create, Read, Update, and Delete) interface to allow users to create and edit graphs.","category":"page"},{"location":"BuildingGraphs/#Creating-Variables-with-IIF-1","page":"Building Graphs","title":"Creating Variables with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables are added using IncrementalInference's addVariable! function. To create the variable, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe variable's label (e.g. :x1 or :a)\nThe variable inference type (aka soft type), which is a subtype of InferenceVariable","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Once variables are initialized to a specific soft type, variable node data (solver data) is templated to that type. ","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"In addition, the following optional parameters are provided:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additional labels for the variable (in DFG these are referred to as tags)\nA solvable flag to indicate whether the variable is ready to be added to a solution","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Three variables are added:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"v1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)","category":"page"},{"location":"BuildingGraphs/#Creating-Factors-with-IIF-1","page":"Building Graphs","title":"Creating Factors with IIF","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Similarly to variables, it is recommended that users start with the IIF implementation of the addFactor! functions to create factors. To create the factors, you provide the following parameters:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The graph the variable is being added to\nThe labels for the variables that the factor is linking\nThe factor function (which is a subtype of )","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Additionally, the solvable flag is also set to indicate that the factor can be used in solving graphs.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Every graph requires a prior for it to be solvable, so it is a good practice to make sure one is added (generally by adding to the first variable in the graph).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Four factors are added: a prior, a linear conditional relationship with a normal distribution between x0 and x1, and a pair of linear conditional relationships between each pose and the landmark.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"prior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"The produced factor graph is:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(Image: imgs/initialgraph.jpg)","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"(For more information on producing plots of the graph, please refer to the Drawing Graphs section).","category":"page"},{"location":"BuildingGraphs/#Listing-Variables-and-Factors-1","page":"Building Graphs","title":"Listing Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Reading, updating, and deleting all use DFG functions (as opposed to adding, where using the IncrementalInference functions are recommended).","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Each variable and factor is uniquely identified by its label. The list of variable and factor labels can be retrieved with the ls/listVariables and lsf/listFactors functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"listVariables\nls","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.listVariables","page":"Building Graphs","title":"DistributedFactorGraphs.listVariables","text":"listVariables(dfg)\nlistVariables(dfg, regexFilter; tags, solvable)\n\n\nGet a list of IDs of the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\nExample\n\nlistVariables(dfg, r\"l\", tags=[:APRILTAG;])\n\nRelated:\n\nls\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#DistributedFactorGraphs.ls","page":"Building Graphs","title":"DistributedFactorGraphs.ls","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\nls(dfg)\nls(dfg, node; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor.\n\n\n\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"listFactors\nlsf","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.listFactors","page":"Building Graphs","title":"DistributedFactorGraphs.listFactors","text":"Get a list of the IDs (labels) of the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#DistributedFactorGraphs.lsf","page":"Building Graphs","title":"DistributedFactorGraphs.lsf","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\nAlias for getNeighbors - returns neighbors around a given node label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"To list all variables or factors (instead of just their labels), use the getVariables and getFactors functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariables\ngetFactors","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getVariables","page":"Building Graphs","title":"DistributedFactorGraphs.getVariables","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getFactors","page":"Building Graphs","title":"DistributedFactorGraphs.getFactors","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: getNeighbors is also worth mentioning at this point as it is a simple way to find the bigraph relationships. More information on this and other ways to retrieve filtered lists of variables/factors (an area that's currently WIP in DFG) can be found in Traversing and Querying.  ","category":"page"},{"location":"BuildingGraphs/#Getting-(Reading)-Variables-and-Factors-1","page":"Building Graphs","title":"Getting (Reading) Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Individual variables and factors can be retrieved from their labels using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getVariable","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getVariable","page":"Building Graphs","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label)\n\n\nGet a DFGVariable from a DFG using its label.\n\n\n\n\n\ngetVariable(dfg, label, solveKey)\n\n\nGet a DFGVariable with a specific solver key. In memory types still return a reference, other types returns a variable with only solveKey.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"getFactor","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.getFactor","page":"Building Graphs","title":"DistributedFactorGraphs.getFactor","text":"Get a DFGFactor from a DFG using its label.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"It is worth noting that getVariable allows a user to retrieve only a single solver entry, so that subsets of the solver data can be retrieved individually (say, in the case that there are many solutions). These can then be updated independently using the functions as discussed in the update section below.","category":"page"},{"location":"BuildingGraphs/#Updating-Variables-and-Factors-1","page":"Building Graphs","title":"Updating Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Full variables and factors can be updated using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"updateVariable!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.updateVariable!","page":"Building Graphs","title":"DistributedFactorGraphs.updateVariable!","text":"Update a complete DFGVariable in the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"updateFactor!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.updateFactor!","page":"Building Graphs","title":"DistributedFactorGraphs.updateFactor!","text":"Update a complete DFGFactor in the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: Skeleton and summary variables are read-only. To perform updates you should use the full factors and variables.","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"NOTE: updateVariable/updateFactor performs a complete update of the respective node. It's not a very efficient way to edit fine-grain detail. There are other methods to perform smaller in-place changes. This is discussed in more detail in Data Structure.","category":"page"},{"location":"BuildingGraphs/#Deleting-Variables-and-Factors-1","page":"Building Graphs","title":"Deleting Variables and Factors","text":"","category":"section"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"Variables and factors can be deleted using the following functions:","category":"page"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"deleteVariable!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.deleteVariable!","page":"Building Graphs","title":"DistributedFactorGraphs.deleteVariable!","text":"Delete a DFGVariable from the DFG using its label.\n\n\n\n\n\nDelete a referenced DFGVariable from the DFG.\n\n\n\n\n\n","category":"function"},{"location":"BuildingGraphs/#","page":"Building Graphs","title":"Building Graphs","text":"deleteFactor!","category":"page"},{"location":"BuildingGraphs/#DistributedFactorGraphs.deleteFactor!","page":"Building Graphs","title":"DistributedFactorGraphs.deleteFactor!","text":"deleteFactor!(dfg, label)\n\n\nDelete a DFGFactor from the DFG using its label.\n\n\n\n\n\ndeleteFactor!(dfg, factor)\n\n\nDelete the referened DFGFactor from the DFG.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#Function-Reference-1","page":"Reference","title":"Function Reference","text":"","category":"section"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"Pages = [\n    \"func_ref.md\"\n]\nDepth = 3","category":"page"},{"location":"func_ref/#","page":"Reference","title":"Reference","text":"Modules = [DistributedFactorGraphs, LightDFGs, DFGPlots]","category":"page"},{"location":"func_ref/#DistributedFactorGraphs.DistributedFactorGraphs","page":"Reference","title":"DistributedFactorGraphs.DistributedFactorGraphs","text":"DistributedFactorGraphs.jl provides a flexible factor graph API for use in the Caesar.jl ecosystem.\n\nThe package supplies:\n\nA standardized API for interacting with factor graphs\nImplementations of the API for in-memory and database-driven operation\nVisualization extensions to validate the underlying graph\n\n\n\n\n\n","category":"module"},{"location":"func_ref/#DistributedFactorGraphs.AbstractBigDataEntry","page":"Reference","title":"DistributedFactorGraphs.AbstractBigDataEntry","text":"abstract type AbstractBigDataEntry\n\nAbstract parent struct for big data entry.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.AbstractDFG","text":"abstract type AbstractDFG\n\nAbstract parent struct for a DFG graph.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFGFactor","page":"Reference","title":"DistributedFactorGraphs.AbstractDFGFactor","text":"abstract type AbstractDFGFactor <: DFGNode\n\nAn abstract DFG factor.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDFGVariable","page":"Reference","title":"DistributedFactorGraphs.AbstractDFGVariable","text":"abstract type AbstractDFGVariable <: DFGNode\n\nAn abstract DFG variable.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractDataStore","page":"Reference","title":"DistributedFactorGraphs.AbstractDataStore","text":"abstract type AbstractDataStore\n\nSuperclass of all key-value datastores.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.AbstractParams","page":"Reference","title":"DistributedFactorGraphs.AbstractParams","text":"abstract type AbstractParams\n\nAbstract parent struct for solver parameters.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.CloudGraphsDFG-Union{Tuple{T}, Tuple{Neo4j.Connection,String,String,String,Any,Any,Any,Any}} where T<:AbstractParams","page":"Reference","title":"DistributedFactorGraphs.CloudGraphsDFG","text":"Create a new CloudGraphs-based DFG factor graph using a Neo4j.Connection.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.CloudGraphsDFG-Union{Tuple{T}, Tuple{String,Int64,String,String,String,String,String,Any,Any,Any,Any}} where T<:AbstractParams","page":"Reference","title":"DistributedFactorGraphs.CloudGraphsDFG","text":"Create a new CloudGraphs-based DFG factor graph by specifying the Neo4j connection information.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.DFGFactor-Union{Tuple{Symbol}, Tuple{S}, Tuple{T}, Tuple{Symbol,Int64}, Tuple{Symbol,Int64,Dates.DateTime}} where S where T","page":"Reference","title":"DistributedFactorGraphs.DFGFactor","text":"Construct a DFG factor given a label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.DFGNode","page":"Reference","title":"DistributedFactorGraphs.DFGNode","text":"abstract type DFGNode\n\nAbstract parent struct for DFG variables and factors.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.DFGNodeParams","page":"Reference","title":"DistributedFactorGraphs.DFGNodeParams","text":"mutable struct DFGNodeParams\n\nThe common node parameters for variables and factors.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.DFGVariable-Union{Tuple{T}, Tuple{Symbol,T}} where T<:InferenceVariable","page":"Reference","title":"DistributedFactorGraphs.DFGVariable","text":"DFGVariable(label, softtype; timestamp, tags, estimateDict, solverDataDict, smallData, bigData, solvable, _internalId)\n\n\nThe default DFGVariable constructor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.FileBigDataEntry","page":"Reference","title":"DistributedFactorGraphs.FileBigDataEntry","text":"struct FileBigDataEntry <: AbstractBigDataEntry\n\nBigDataEntry in a file.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.FileDataStore","page":"Reference","title":"DistributedFactorGraphs.FileDataStore","text":"struct FileDataStore <: AbstractDataStore{UInt8}\n\nSimple file data store with a specified data type and a specified key type.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.GeneralBigDataEntry","page":"Reference","title":"DistributedFactorGraphs.GeneralBigDataEntry","text":"mutable struct GeneralBigDataEntry <: AbstractBigDataEntry\n\nGeneralBigDataEntry is a generic multipurpose data entry that creates a unique reproducible key using userIdrobotIdsessionIdvariableIdkey.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.GenericFunctionNodeData","page":"Reference","title":"DistributedFactorGraphs.GenericFunctionNodeData","text":"mutable struct GenericFunctionNodeData{T, S}\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.InMemoryDataStore","page":"Reference","title":"DistributedFactorGraphs.InMemoryDataStore","text":"struct InMemoryDataStore{T, E<:AbstractBigDataEntry} <: AbstractDataStore{T}\n\nSimple in-memory data store with a specified data type and a specified key type.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.InMemoryDataStore-Tuple{}","page":"Reference","title":"DistributedFactorGraphs.InMemoryDataStore","text":"InMemoryDataStore()\n\n\nCreate an in-memory store using binary data (UInt8) as a type.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.InMemoryDataStore-Union{Tuple{}, Tuple{E}, Tuple{T}} where E<:AbstractBigDataEntry where T","page":"Reference","title":"DistributedFactorGraphs.InMemoryDataStore","text":"InMemoryDataStore()\n\n\nCreate an in-memory store using a specific data type.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.MeanMaxPPE","page":"Reference","title":"DistributedFactorGraphs.MeanMaxPPE","text":"struct MeanMaxPPE <: AbstractPointParametricEst\n\nData container to store Parameteric Point Estimate (PPE) for mean and max.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.MongodbBigDataEntry","page":"Reference","title":"DistributedFactorGraphs.MongodbBigDataEntry","text":"struct MongodbBigDataEntry <: AbstractBigDataEntry\n\nBigDataEntry in MongoDB.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.NoSolverParams","page":"Reference","title":"DistributedFactorGraphs.NoSolverParams","text":"struct NoSolverParams <: AbstractParams\n\nEmpty structure for solver parameters.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.PackedVariableNodeData","page":"Reference","title":"DistributedFactorGraphs.PackedVariableNodeData","text":"mutable struct PackedVariableNodeData\n\nPacked VariabeNodeData structure for serializing DFGVariables.\n\n\n\nFields:\n\nvecval::Array{Float64,1}\ndimval::Int64\nvecbw::Array{Float64,1}\ndimbw::Int64\nBayesNetOutVertIDs::Array{Symbol,1}\ndimIDs::Array{Int64,1}\ndims::Int64\neliminated::Bool\nBayesNetVertID::Symbol\nseparator::Array{Symbol,1}\nsofttype::String\ninitialized::Bool\ninferdim::Float64\nismargin::Bool\ndontmargin::Bool\nsolveInProgress::Int64\nsolvedCount::Int64\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.VariableNodeData","page":"Reference","title":"DistributedFactorGraphs.VariableNodeData","text":"mutable struct VariableNodeData{T<:InferenceVariable}\n\nData container for solver-specific data.\n\n\n\nFields:\n\nval::Array{Float64,2}\nbw::Array{Float64,2}\nBayesNetOutVertIDs::Array{Symbol,1}\ndimIDs::Array{Int64,1}\ndims::Int64\neliminated::Bool\nBayesNetVertID::Symbol\nseparator::Array{Symbol,1}\nsofttype::InferenceVariable\ninitialized::Bool\ninferdim::Float64\nismargin::Bool\ndontmargin::Bool\nsolveInProgress::Int64\nsolvedCount::Int64\nevents::Dict{Symbol,Base.GenericCondition{ReentrantLock}}\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"_getDuplicatedEmptyDFG(dfg)\n\n\nGets an empty and unique CloudGraphsDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Tuple{GraphsDFG}","page":"Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"_getDuplicatedEmptyDFG(dfg)\n\n\nGets an empty and unique CloudGraphsDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"Gets an empty and unique CloudGraphsDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addBigData!-Union{Tuple{E}, Tuple{D}, Tuple{T}, Tuple{D,E,T}} where E<:AbstractBigDataEntry where D<:AbstractDataStore{T} where T","page":"Reference","title":"DistributedFactorGraphs.addBigData!","text":"Adds the data to the store with the given entry. The function will warn if the entry already exists and will overwrite it.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addBigDataEntry!-Tuple{AbstractDFG,Symbol,AbstractBigDataEntry}","page":"Reference","title":"DistributedFactorGraphs.addBigDataEntry!","text":"addBigDataEntry!(dfg, label, bde)\n\n\nAdd Big Data Entry to distributed factor graph. Should be extended if DFG variable is not returned by reference.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addBigDataEntry!-Tuple{AbstractDFGVariable,AbstractBigDataEntry}","page":"Reference","title":"DistributedFactorGraphs.addBigDataEntry!","text":"addBigDataEntry!(var, bde)\n\n\nAdd Big Data Entry to a DFG variable\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG,Array{#s22,1} where #s22<:AbstractDFGVariable,F}} where F<:AbstractDFGFactor","page":"Reference","title":"DistributedFactorGraphs.addFactor!","text":"addFactor!(dfg, variables, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG,Array{Symbol,1},F}} where F<:AbstractDFGFactor","page":"Reference","title":"DistributedFactorGraphs.addFactor!","text":"addFactor!(dfg, variableLabels, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addFactor!-Union{Tuple{F}, Tuple{AbstractDFG,F}} where F<:AbstractDFGFactor","page":"Reference","title":"DistributedFactorGraphs.addFactor!","text":"Add a DFGFactor to a DFG.\n\naddFactor!(dfg, factor)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addPPE!","page":"Reference","title":"DistributedFactorGraphs.addPPE!","text":"addPPE!(dfg, sourceVariable)\naddPPE!(dfg, sourceVariable, ppekey)\n\n\nAdd a new PPE entry from a deepcopy of the source variable PPE. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addPPE!-Union{Tuple{P}, Tuple{AbstractDFG,Symbol,P}, Tuple{AbstractDFG,Symbol,P,Symbol}} where P<:AbstractPointParametricEst","page":"Reference","title":"DistributedFactorGraphs.addPPE!","text":"Add variable PPE, errors if it already exists.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addVariable!-Union{Tuple{V}, Tuple{G}, Tuple{G,V}} where V<:AbstractDFGVariable where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.addVariable!","text":"addVariable!(dfg, variable)\n\n\nAdd a DFGVariable to a DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.addVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, variablekey, vnd)\naddVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nAdd variable solver data, errors if it already exists.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.addVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, sourceVariable)\naddVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nAdd a new solver data  entry from a deepcopy of the source variable solver data. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.buildSubgraphFromLabels!-Union{Tuple{G}, Tuple{G,Array{Symbol,1}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.buildSubgraphFromLabels!","text":"buildSubgraphFromLabels!(dfg, syms; subfg, solvable, allowedFactors)\n\n\nConstruct a new factor graph object as a subgraph of dfg <: AbstractDFG based on the variable labels syms::Vector{Symbols}.\n\nSamC: Can we not just use _copyIntoGraph! for this? Looks like a small refactor to make it work. Will paste in as-is for now and we can figure it out as we go.\n\nNotes\n\nSlighly messy internals, but gets the job done – some room for performance improvement.\nDefaults to GraphDFG, but likely to change to LightDFG in future.\n\nDevNotes\n\nTODO: still needs to be consolidated with DFG._copyIntoGraph\n\nRelated\n\nlistVariables, _copyIntoGraph!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.clearRobot!!-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.clearRobot!!","text":"clearRobot!!(dfg)\n\n\nDANGER: Clears the whole robot + sessions from the database.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.clearSession!!-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.clearSession!!","text":"clearSession!!(dfg)\n\n\nDANGER: Clears the whole session from the database.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.clearUser!!-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.clearUser!!","text":"clearUser!!(dfg)\n\n\nDANGER: Clears the whole user + robot + sessions from the database.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareAll-Union{Tuple{T}, Tuple{T,T}} where T<:Tuple","page":"Reference","title":"DistributedFactorGraphs.compareAll","text":"compareAll(Al, Bl; show, skip)\n\n\nRecursively compare the all fields of T that are not in skip for objects Al and Bl.\n\nTODO > add to func_ref.md\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareAllVariables-Union{Tuple{G2}, Tuple{G1}, Tuple{G1,G2}} where G2<:AbstractDFG where G1<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.compareAllVariables","text":"compareAllVariables(fgA, fgB; skip, show, skipsamples)\n\n\nCompare all variables in both ::FactorGraphs A and B.\n\nNotes\n\nA and B should all the same variables and factors.\n\nRelated:\n\ncompareFactorGraphs, compareSimilarVariables, compareVariable, ls\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFactor-Tuple{DFGFactor,DFGFactor}","page":"Reference","title":"DistributedFactorGraphs.compareFactor","text":"compareFactor(A, B; show, skip, skipsamples, skipcompute)\n\n\nCompare that all fields are the same in a ::FactorGraph factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFactorGraphs-Union{Tuple{G2}, Tuple{G1}, Tuple{G1,G2}} where G2<:AbstractDFG where G1<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.compareFactorGraphs","text":"Compare and return if two factor graph objects are the same, by comparing similar variables and factors.\n\nNotes:\n\nDefault items to skip with skipsamples, skipcompute.\nUser defined fields to skip can be specified with skip::Vector{Symbol}.\n\nRelated:\n\ncompareSimilarVariables, compareSimilarFactors, compareAllVariables, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareFields-Union{Tuple{T}, Tuple{T,T}} where T","page":"Reference","title":"DistributedFactorGraphs.compareFields","text":"compareFields(Al, Bl; show, skip)\n\n\nCompare the all fields of T that are not in skip for objects Al and Bl.\n\nTODO > add to func_ref.md\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareSimilarFactors-Union{Tuple{G2}, Tuple{G1}, Tuple{G1,G2}} where G2<:AbstractDFG where G1<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.compareSimilarFactors","text":"Compare similar factors between ::FactorGraphs A and B.\n\nRelated:\n\ncompareFactorGraphs, compareSimilarVariables, compareAllVariables, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareSimilarVariables-Union{Tuple{G2}, Tuple{G1}, Tuple{G1,G2}} where G2<:AbstractDFG where G1<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.compareSimilarVariables","text":"Compare similar labels between ::FactorGraphs A and B.\n\nNotes\n\nAt least one variable label should exist in both A and B.\n\nRelated:\n\ncompareFactorGraphs, compareAllVariables, compareSimilarFactors, compareVariable, ls.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.compareVariable-Tuple{DFGVariable,DFGVariable}","page":"Reference","title":"DistributedFactorGraphs.compareVariable","text":"compareVariable(A, B; skip, show, skipsamples)\n\n\nCompare that all fields are the same in a ::FactorGraph variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.copySession!-Tuple{CloudGraphsDFG,Union{Nothing, CloudGraphsDFG}}","page":"Reference","title":"DistributedFactorGraphs.copySession!","text":"copySession!(sourceDFG, destDFG)\n\n\nDANGER: Copies and overwrites the destination session. If no destination specified then it creates a unique one.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.copySession!-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.copySession!","text":"copySession!(sourceDFG)\n\n\nDANGER: Copies the source to a new unique destination.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.copyStore-Union{Tuple{E}, Tuple{D2}, Tuple{D1}, Tuple{T}, Tuple{D1,D2}} where E<:AbstractBigDataEntry where D2<:AbstractDataStore{T} where D1<:AbstractDataStore{T} where T","page":"Reference","title":"DistributedFactorGraphs.copyStore","text":"copyStore(sourceStore, destStore; sourceEntries)\n\n\nCopies all the entries from the source into the destination. Can specify which entries to copy with the sourceEntries parameter. Returns the list of copied entries.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.createDfgSessionIfNotExist-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.createDfgSessionIfNotExist","text":"createDfgSessionIfNotExist(dfg)\n\n\nShortcut method to create the user, robot, and session if it doesn't already exist.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteBigData!-Union{Tuple{E}, Tuple{D}, Tuple{T}, Tuple{D,E}} where E<:AbstractBigDataEntry where D<:AbstractDataStore{T} where T","page":"Reference","title":"DistributedFactorGraphs.deleteBigData!","text":"deleteBigData!(store, entry)\n\n\nDelete the data in the store for the given entry. The function will error and return nothing if the entry does not exist.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteBigDataEntry!-Tuple{AbstractDFGVariable,Symbol}","page":"Reference","title":"DistributedFactorGraphs.deleteBigDataEntry!","text":"deleteBigDataEntry!(var, key)\n\n\nDelete big data entry from the factor graph. Note this doesn't remove it from any data stores.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteFactor!-Union{Tuple{F}, Tuple{G}, Tuple{G,F}} where F<:AbstractDFGFactor where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.deleteFactor!","text":"deleteFactor!(dfg, factor)\n\n\nDelete the referened DFGFactor from the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteFactor!-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.deleteFactor!","text":"deleteFactor!(dfg, label)\n\n\nDelete a DFGFactor from the DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deletePPE!","page":"Reference","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, variablekey)\ndeletePPE!(dfg, variablekey, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deletePPE!","page":"Reference","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, sourceVariable)\ndeletePPE!(dfg, sourceVariable, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariable!-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.deleteVariable!","text":"Delete a DFGVariable from the DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariable!-Union{Tuple{V}, Tuple{G}, Tuple{G,V}} where V<:AbstractDFGVariable where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.deleteVariable!","text":"Delete a referenced DFGVariable from the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, variablekey)\ndeleteVariableSolverData!(dfg, variablekey, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, sourceVariable)\ndeleteVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.emptyTags!-Tuple{Union{GraphsDFG, LightDFG},Symbol}","page":"Reference","title":"DistributedFactorGraphs.emptyTags!","text":"emptyTags!(dfg, sym)\n\n\nEmpty all tags from the node (empty)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.exists-Union{Tuple{N}, Tuple{G}, Tuple{G,N}} where N<:DFGNode where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.exists","text":"True if the variable or factor exists in the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.findClosestTimestamp-Union{Tuple{T}, Tuple{S}, Tuple{Array{Tuple{Dates.DateTime,T},1},Array{Tuple{Dates.DateTime,S},1}}} where T where S","page":"Reference","title":"DistributedFactorGraphs.findClosestTimestamp","text":"findClosestTimestamp(setA, setB)\n\n\nFind and return the closest timestamp from two sets of Tuples.  Also return the minimum delta-time (::Millisecond) and how many elements match from the two sets are separated by the minimum delta-time.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.findVariableNearTimestamp","page":"Reference","title":"DistributedFactorGraphs.findVariableNearTimestamp","text":"findVariableNearTimestamp(dfg, timest)\nfindVariableNearTimestamp(dfg, timest, regexFilter; tags, solvable, warnDuplicate, number)\n\n\nFind and return nearest variable labels per delta time.  Function will filter on regexFilter, tags, and solvable.\n\nDevNotes:\n\nTODO number should allow returning more than one for k-nearest matches.\nFuture versions likely will require some optimization around the internal getVariable call.\nPerhaps a dedicated/efficient getVariableTimestamp for all DFG flavors.\n\nRelated\n\nls, listVariables, findClosestTimestamp\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getAddHistory-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getAddHistory","text":"getAddHistory(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getAdjacencyMatrix-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getAdjacencyMatrix","text":"getAdjacencyMatrix(dfg; solvable)\n\n\nGet a matrix indicating relationships between variables and factors. Rows are all factors, columns are all variables, and each cell contains either nothing or the symbol of the relating factor. The first row and first column are factor and variable headings respectively.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBiadjacencyMatrix-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getBiadjacencyMatrix","text":"getBiadjacencyMatrix(dfg; solvable)\n\n\nGet a matrix indicating adjacency between variables and factors. Returned as a named tuple: B::SparseMatrixCSC{Int}, varLabels::Vector{Symbol) facLabels::Vector{Symbol). Rows are the factors, columns are the variables, with the corresponding labels in varLabels,facLabels.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBigData-Union{Tuple{E}, Tuple{D}, Tuple{T}, Tuple{D,E}} where E<:AbstractBigDataEntry where D<:AbstractDataStore{T} where T","page":"Reference","title":"DistributedFactorGraphs.getBigData","text":"Get the data for the specified entry, returns the data or Nothing.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBigDataEntries-Tuple{AbstractDFGVariable}","page":"Reference","title":"DistributedFactorGraphs.getBigDataEntries","text":"getBigDataEntries(var)\n\n\nGet big data entries, Vector{AbstractBigDataEntry}\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBigDataEntry-Tuple{AbstractDFGVariable,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getBigDataEntry","text":"getBigDataEntry(var, key)\n\n\nGet big data entry\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getBigDataKeys-Tuple{AbstractDFGVariable}","page":"Reference","title":"DistributedFactorGraphs.getBigDataKeys","text":"getBigDataKeys(var)\n\n\ngetBigDataKeys\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDFGInfo-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getDFGInfo","text":"getDFGInfo(dfg)\n\n\nConvenience function to get all the matadata of a DFG\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getDescription-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getDescription","text":"getDescription(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactor-Union{Tuple{G}, Tuple{G,Union{String, Symbol}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getFactor","text":"Get a DFGFactor from a DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactorFunction-Tuple{GenericFunctionNodeData}","page":"Reference","title":"DistributedFactorGraphs.getFactorFunction","text":"getFactorFunction(fcd)\n\n\nReturn reference to the user factor in <:AbstractDFG identified by ::Symbol.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactorType-Tuple{GenericFunctionNodeData}","page":"Reference","title":"DistributedFactorGraphs.getFactorType","text":"getFactorType(data)\n\n\nReturn user factor type from factor graph identified by label ::Symbol.\n\nNotes\n\nReplaces older getfnctype.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getFactors-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getFactors","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getInternalId-Tuple{Union{DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getInternalId","text":"getInternalId(v)\n\n\nReturn the internal ID for DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getLabel-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getLabel","text":"getLabel(v)\n\n\nReturn the label for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getLastUpdatedTimestamp-Tuple{AbstractPointParametricEst}","page":"Reference","title":"DistributedFactorGraphs.getLastUpdatedTimestamp","text":"getLastUpdatedTimestamp(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getMaxPPE-Tuple{AbstractPointParametricEst}","page":"Reference","title":"DistributedFactorGraphs.getMaxPPE","text":"getMaxPPE(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getMeanPPE-Tuple{AbstractPointParametricEst}","page":"Reference","title":"DistributedFactorGraphs.getMeanPPE","text":"getMeanPPE(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getNeighborhood-Tuple{AbstractDFG,Symbol,Int64}","page":"Reference","title":"DistributedFactorGraphs.getNeighborhood","text":"getNeighborhood(dfg, label, distance)\n\n\nBuild a list of all unique neighbors inside 'distance'\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getNeighbors-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getNeighbors","text":"getNeighbors(dfg, label; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getPPE","page":"Reference","title":"DistributedFactorGraphs.getPPE","text":"getPPE(dfg, variablekey)\ngetPPE(dfg, variablekey, ppekey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph for a given solve key.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated getMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getPPE","page":"Reference","title":"DistributedFactorGraphs.getPPE","text":"getPPE(vari)\ngetPPE(vari, solveKey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated\n\ngetMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getPPEDict-Tuple{Union{DFGVariableSummary, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getPPEDict","text":"getPPEDict(v)\n\n\nGet the PPE dictionary for a variable. Its direct use is not recomended.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobot-Tuple{CloudGraphsDFG,Symbol,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getRobot","text":"getRobot(dfg, userId, robotId)\n\n\nGet a robot specified by userId:robotId. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobot-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.getRobot","text":"getRobot(dfg)\n\n\nGet the robot specified by the DFG object. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobotData-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getRobotData","text":"getRobotData(dfg)\n\n\nGet the robot data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getRobotId-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getRobotId","text":"getRobotId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSession-Tuple{CloudGraphsDFG,Symbol,Symbol,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getSession","text":"getSession(dfg, userId, robotId, sessionId)\n\n\nGet a session specified by userId:robotId:sessionId. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSession-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.getSession","text":"getSession(dfg)\n\n\nGet the session specified by the DFG object. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSessionData-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getSessionData","text":"getSessionData(dfg)\n\n\nGet the session data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSessionId-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getSessionId","text":"getSessionId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSmallData-Tuple{DFGVariable}","page":"Reference","title":"DistributedFactorGraphs.getSmallData","text":"getSmallData(v)\n\n\nGet the small data for a variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSofttype-Tuple{VariableNodeData}","page":"Reference","title":"DistributedFactorGraphs.getSofttype","text":"getSofttype(vnd)\n\n\nVariable nodes softtype information holding a variety of meta data associated with the type of variable stored in that node of the factor graph.\n\nRelated\n\ngetVariableType\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSofttypename-Tuple{DFGVariableSummary}","page":"Reference","title":"DistributedFactorGraphs.getSofttypename","text":"getSofttypename(v)\n\n\nRetrieve the soft type name symbol for a DFGVariableSummary. ie :Point2, Pose2, etc.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolvable-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(dfg, sym)\n\n\nGet 'solvable' parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolvable-Tuple{Union{DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(var)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition.  Useful for ensuring atomic transactions.\n\nRelated:\n\nisSolveInProgress\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolveInProgress","page":"Reference","title":"DistributedFactorGraphs.getSolveInProgress","text":"getSolveInProgress(var)\ngetSolveInProgress(var, solveKey)\n\n\nWhich variables or factors are currently being used by an active solver.  Useful for ensuring atomic transactions.\n\nDevNotes:\n\nWill be renamed to data.solveinprogress which will be in VND, not DFGNode – see DFG #201\n\nRelated\n\nisSolvable\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getSolvedCount-Tuple{VariableNodeData}","page":"Reference","title":"DistributedFactorGraphs.getSolvedCount","text":"getSolvedCount(v)\n\n\nGet the number of times a variable has been inferred – i.e. solvedCount.\n\nRelated\n\nisSolved, setSolvedCount!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverData","page":"Reference","title":"DistributedFactorGraphs.getSolverData","text":"getSolverData(v)\ngetSolverData(v, key)\n\n\nRetrieve solver data structure stored in a variable.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getSolverData-Union{Tuple{F}, Tuple{F}} where F<:DFGFactor","page":"Reference","title":"DistributedFactorGraphs.getSolverData","text":"getSolverData(f)\n\n\nRetrieve solver data structure stored in a factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverDataDict-Tuple{DFGVariable}","page":"Reference","title":"DistributedFactorGraphs.getSolverDataDict","text":"getSolverDataDict(v)\n\n\nGet solver data dictionary for a variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSolverParams-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getSolverParams","text":"getSolverParams(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSubgraph-Union{Tuple{H}, Tuple{G}, Tuple{G,Array{Symbol,1}}, Tuple{G,Array{Symbol,1},Bool}, Tuple{G,Array{Symbol,1},Bool,H}} where H<:AbstractDFG where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getSubgraph","text":"getSubgraph(dfg, variableFactorLabels)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors, addToDFG)\n\n\nGet a deep subgraph copy from the DFG given a list of variables and factors. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSubgraphAroundNode","page":"Reference","title":"DistributedFactorGraphs.getSubgraphAroundNode","text":"getSubgraphAroundNode(dfg, node)\ngetSubgraphAroundNode(dfg, node, distance)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors, addToDFG; solvable)\n\n\nRetrieve a deep subgraph copy around a given variable or factor. Optionally provide a distance to specify the number of edges should be followed. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables. Note: Always returns the node at the center, but filters around it if solvable is set.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getSuggestedPPE-Tuple{AbstractPointParametricEst}","page":"Reference","title":"DistributedFactorGraphs.getSuggestedPPE","text":"getSuggestedPPE(est)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSummary-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getSummary","text":"Get a summary of the graph (first-class citizens of variables and factors). Returns a DFGSummary.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getSummaryGraph-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getSummaryGraph","text":"Get a summary graph (first-class citizens of variables and factors) with the same structure as the original graph. Note this is a copy of the original. Returns a LightDFG{NoSolverParams, DFGVariableSummary, DFGFactorSummary}.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getTags-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getTags","text":"getTags(v)\n\n\nReturn the tags for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getTimestamp-Tuple{Union{DFGFactorSummary, DFGVariableSummary, DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.getTimestamp","text":"getTimestamp(v)\n\n\nGet the timestamp of a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUser-Tuple{CloudGraphsDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getUser","text":"getUser(dfg, userId)\n\n\nGet a user specified by userId. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUser-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.getUser","text":"getUser(dfg)\n\n\nGet the user specified by the DFG object. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUserData-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getUserData","text":"getUserData(dfg)\n\n\nGet the user data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getUserId-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getUserId","text":"getUserId(dfg)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariable-Tuple{AbstractDFG,Symbol,Symbol}","page":"Reference","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label, solveKey)\n\n\nGet a DFGVariable with a specific solver key. In memory types still return a reference, other types returns a variable with only solveKey.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariable-Union{Tuple{G}, Tuple{G,Union{String, Symbol}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getVariable","text":"getVariable(dfg, label)\n\n\nGet a DFGVariable from a DFG using its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariableOrder-Tuple{DFGFactor}","page":"Reference","title":"DistributedFactorGraphs.getVariableOrder","text":"getVariableOrder(fct)\n\n\nGet the variable ordering for this factor. Should be equivalent to getNeighbors unless something was deleted in the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariableSolverData","page":"Reference","title":"DistributedFactorGraphs.getVariableSolverData","text":"getVariableSolverData(dfg, variablekey)\ngetVariableSolverData(dfg, variablekey, solvekey)\n\n\nGet variable solverdata for a given solve key.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.getVariableType-Tuple","page":"Reference","title":"DistributedFactorGraphs.getVariableType","text":"getVariableType\n\nAlias for getSofttype.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getVariables-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getVariables","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasOrphans-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.hasOrphans","text":"Checks if the graph is not fully connected, returns true if it is not contiguous.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasTags-Tuple{AbstractDFG,Symbol,Array{Symbol,1}}","page":"Reference","title":"DistributedFactorGraphs.hasTags","text":"hasTags(dfg, sym, tags; matchAll)\n\n\nDetermine if the variable or factor neighbors have the tags:;Vector{Symbol}, and matchAll::Bool.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.hasTagsNeighbors-Tuple{AbstractDFG,Symbol,Array{Symbol,1}}","page":"Reference","title":"DistributedFactorGraphs.hasTagsNeighbors","text":"hasTagsNeighbors(dfg, sym, tags; matchAll)\n\n\nDetermine if the variable or factor neighbors have the tags:;Vector{Symbol}, and matchAll::Bool.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isFactor-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.isFactor","text":"Return whether sym::Symbol represents a factor vertex in the graph DFG. Checks whether it both exists in the graph and is a factor. (If you rather want a quicker for type, just do node isa DFGFactor)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isFullyConnected-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.isFullyConnected","text":"isFullyConnected(dfg)\n\n\nChecks if the graph is fully connected, returns true if so.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isInitialized","page":"Reference","title":"DistributedFactorGraphs.isInitialized","text":"isInitialized(var)\nisInitialized(var, key)\n\n\nReturns state of vertex data .initialized flag.\n\nNotes:\n\nused by both factor graph variable and Bayes tree clique logic.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.isPrior-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.isPrior","text":"Return ::Bool on whether given factor fc::Symbol is a prior in factor graph dfg.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isSolvable-Tuple{Union{DFGFactor, DFGVariable}}","page":"Reference","title":"DistributedFactorGraphs.isSolvable","text":"isSolvable(node)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition. returns true if getSolvable > 0 Related:\n\ngetSolvable(@ref)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isSolved-Tuple{VariableNodeData}","page":"Reference","title":"DistributedFactorGraphs.isSolved","text":"isSolved(v)\n\n\nBoolean on whether the variable has been solved.\n\nRelated\n\ngetSolved, setSolved!\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.isVariable-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.isVariable","text":"Return whether sym::Symbol represents a variable vertex in the graph DFG. Checks whether it both exists in the graph and is a variable. (If you rather want a quick for type, just do node isa DFGVariable)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listFactors-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.listFactors","text":"Get a list of the IDs (labels) of the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listPPE-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.listPPE","text":"listPPE(dfg, variablekey)\n\n\nList all the PPE data keys in the variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listStoreEntries-Union{Tuple{D}, Tuple{E}, Tuple{D}} where E<:AbstractBigDataEntry where D<:AbstractDataStore","page":"Reference","title":"DistributedFactorGraphs.listStoreEntries","text":"listStoreEntries(store)\n\n\nList all entries in the data store.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listTags-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.listTags","text":"listTags(dfg, sym)\n\n\nReturn the tags for a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listVariableSolverData-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.listVariableSolverData","text":"listVariableSolverData(dfg, variablekey)\n\n\nList all the solver data keys in the variable.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.listVariables-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.listVariables","text":"listVariables(dfg)\nlistVariables(dfg, regexFilter; tags, solvable)\n\n\nGet a list of IDs of the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\nExample\n\nlistVariables(dfg, r\"l\", tags=[:APRILTAG;])\n\nRelated:\n\nls\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.loadDFG-Union{Tuple{G}, Tuple{String,Module,G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.loadDFG","text":"loadDFG(dst, iifModule, dfgLoadInto)\n\n\nLoad a DFG from a saved folder. Always provide the IIF module as the second parameter.\n\nExample\n\nusing DistributedFactorGraphs, IncrementalInference\n# Create a DFG - can make one directly, e.g. GraphsDFG{NoSolverParams}() or use IIF:\ndfg = initfg()\n# Load the graph\nloadDFG(\"/tmp/savedgraph.tar.gz\", IncrementalInference, dfg)\n# Use the DFG as you do normally.\nls(dfg)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.ls-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.ls","text":"Retrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.ls-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.ls","text":"List the DFGVariables in the DFG. Optionally specify a label regular expression to retrieves a subset of the variables. Tags is a list of any tags that a node must have (at least one match).\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.ls-Union{Tuple{T}, Tuple{G}, Tuple{G,T}} where T<:DFGNode where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.ls","text":"ls(dfg)\nls(dfg, node; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsRobots-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.lsRobots","text":"lsRobots(dfg)\n\n\nList all robots for the specified DFG's user. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsSessions-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.lsSessions","text":"lsSessions(dfg)\n\n\nList all sessions for the specified DFG's robot and user. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsTypes-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.lsTypes","text":"Return ::Dict{Symbol, Vector{String}} of all unique variable types in factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsUsers-Tuple{CloudGraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.lsUsers","text":"lsUsers(dfg)\n\n\nList all users. Returns nothing if it isn't found.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsWho-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.lsWho","text":"lsWho(dfg, type)\n\n\nGives back all factor labels that fit the bill:     lsWho(dfg, :Pose3)\n\nDev Notes\n\nCloud versions will benefit from less data transfer\nls(dfg::C, ::T) where {C <: CloudDFG, T <: ..}\n\nRelated\n\nls, lsf, lsfPriors\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsf-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.lsf","text":"Alias for getNeighbors - returns neighbors around a given node label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsf-Union{Tuple{G}, Tuple{G}, Tuple{G,Union{Nothing, Regex}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.lsf","text":"List the DFGFactors in the DFG. Optionally specify a label regular expression to retrieves a subset of the factors.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfPriors-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.lsfPriors","text":"Return vector of prior factor symbol labels in factor graph dfg.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfTypes-Union{Tuple{G}, Tuple{G}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.lsfTypes","text":"Return ::Dict{Symbol, Vector{String}} of all unique factor types in factor graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.lsfWho-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.lsfWho","text":"lsfWho(dfg, type)\n\n\nGives back all factor labels that fit the bill:     lsfWho(dfg, :Point2Point2)\n\nDev Notes\n\nCloud versions will benefit from less data transfer\nls(dfg::C, ::T) where {C <: CloudDFG, T <: ..}\n\nRelated\n\nls, lsf, lsfPriors\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeGraphVariableData!-Union{Tuple{H}, Tuple{G}, Tuple{H,G,Array{Symbol,1}}} where H<:AbstractDFG where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.mergeGraphVariableData!","text":"mergeGraphVariableData!(destDFG, sourceDFG, varSyms)\n\n\nCommon function to update all solver data and estimates from one graph to another. This should be used to push local solve data back into a cloud graph, for example.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergePPEs!-Tuple{AbstractDFGVariable,AbstractDFGVariable}","page":"Reference","title":"DistributedFactorGraphs.mergePPEs!","text":"mergePPEs!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeTags!-Tuple{Union{GraphsDFG, LightDFG},Symbol,Array{Symbol,1}}","page":"Reference","title":"DistributedFactorGraphs.mergeTags!","text":"mergeTags!(dfg, sym, tags)\n\n\nMerge add tags to a variable or factor (union)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeVariableData!-Tuple{AbstractDFG,AbstractDFGVariable}","page":"Reference","title":"DistributedFactorGraphs.mergeVariableData!","text":"mergeVariableData!(dfg, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.mergeVariableSolverData!-Tuple{DFGVariable,DFGVariable}","page":"Reference","title":"DistributedFactorGraphs.mergeVariableSolverData!","text":"mergeVariableSolverData!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). If the same key is present in another collection, the value for that key will be the value it has in the last collection listed (updated). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.printFactor-Tuple{AbstractDFG,Symbol}","page":"Reference","title":"DistributedFactorGraphs.printFactor","text":"printFactor(dfg, sym)\n\n\nDisplay and return to console the user factor identified by tag name.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.printVariable","page":"Reference","title":"DistributedFactorGraphs.printVariable","text":"printVariable(dfg, sym)\nprintVariable(dfg, sym, solveKey)\n\n\nDisplay the content of VariableNodeData to console for a given factor graph and variable tag::Symbol.\n\nDev Notes\n\nTODO split as two show macros between AMP and DFG\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.removeTags!-Tuple{Union{GraphsDFG, LightDFG},Symbol,Array{Symbol,1}}","page":"Reference","title":"DistributedFactorGraphs.removeTags!","text":"removeTags!(dfg, sym, tags)\n\n\nRemove the tags from the node (setdiff)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.saveDFG-Tuple{AbstractDFG,String}","page":"Reference","title":"DistributedFactorGraphs.saveDFG","text":"saveDFG(dfg, folder; compress)\n\n\nSave a DFG to a folder. Will create/overwrite folder if it exists.\n\nDevNotes:\n\nTODO remove compress kwarg.\n\nExample\n\nusing DistributedFactorGraphs, IncrementalInference\n# Create a DFG - can make one directly, e.g. GraphsDFG{NoSolverParams}() or use IIF:\ndfg = initfg()\n# ... Add stuff to graph using either IIF or DFG:\nv1 = addVariable!(dfg, :a, ContinuousScalar, labels = [:POSE], solvable=0)\n# Now save it:\nsaveDFG(dfg, \"/tmp/saveDFG.tar.gz\")\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setDescription!-Tuple{AbstractDFG,String}","page":"Reference","title":"DistributedFactorGraphs.setDescription!","text":"setDescription!(dfg, description)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setRobotData!-Tuple{AbstractDFG,Dict{Symbol,String}}","page":"Reference","title":"DistributedFactorGraphs.setRobotData!","text":"setRobotData!(dfg, data)\n\n\nSet the robot data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSerializationModule!-Union{Tuple{G}, Tuple{G,Module}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.setSerializationModule!","text":"setSerializationModule!(dfg, mod)\n\n\nDeserialization of IncrementalInference objects require discovery of foreign types.\n\nExample:\n\nTemplate to tunnel types from a user module:\n\n# or more generic solution -- will always try Main if available\nIIF.setSerializationNamespace!(Main)\n\n# or a specific package such as RoME if you import all variable and factor types into a specific module.\nusing RoME\nIIF.setSerializationNamespace!(RoME)\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSessionData!-Tuple{AbstractDFG,Dict{Symbol,String}}","page":"Reference","title":"DistributedFactorGraphs.setSessionData!","text":"setSessionData!(dfg, data)\n\n\nSet the session data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSmallData!-Tuple{DFGVariable,Dict{String,String}}","page":"Reference","title":"DistributedFactorGraphs.setSmallData!","text":"setSmallData!(v, smallData)\n\n\nSet the small data for a variable. This will overwrite old smallData.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvable!-Tuple{AbstractDFG,Symbol,Int64}","page":"Reference","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(dfg, sym, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvable!-Union{Tuple{N}, Tuple{N,Int64}} where N<:DFGNode","page":"Reference","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(node, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolvedCount!-Tuple{VariableNodeData,Int64}","page":"Reference","title":"DistributedFactorGraphs.setSolvedCount!","text":"setSolvedCount!(v, val)\n\n\nUpdate/set the solveCount value.\n\nRelated\n\ngetSolved, isSolved\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSolverData!","page":"Reference","title":"DistributedFactorGraphs.setSolverData!","text":"setSolverData!(v, data)\nsetSolverData!(v, data, key)\n\n\nSet solver data structure stored in a variable.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.setTags!-Tuple{Union{DFGFactorSummary, DFGVariableSummary, SkeletonDFGFactor, SkeletonDFGVariable, DFGFactor, DFGVariable},Union{Set{Symbol}, Array{Symbol,1}}}","page":"Reference","title":"DistributedFactorGraphs.setTags!","text":"setTags!(f, tags)\n\n\nSet the tags for a DFGNode.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setTimestamp!-Tuple{AbstractDFG,Symbol,Dates.DateTime}","page":"Reference","title":"DistributedFactorGraphs.setTimestamp!","text":"setTimestamp!(dfg, lbl, ts)\n\n\nSet the timestamp of a Variable/Factor object in a factor graph. Note: Since timestamp is not mutable setTimestamp! calls updateVariable! internally. See also setTimestamp\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setTimestamp-Tuple{DFGVariable,Dates.DateTime}","page":"Reference","title":"DistributedFactorGraphs.setTimestamp","text":"setTimestamp(v, ts; verbose)\n\n\nSet the timestamp of a DFGVariable object returning a new DFGVariable. Note: Since the timestamp field is not mutable setTimestamp returns a new variable with the updated timestamp (note the absence of !). Use updateVariable! on the returened variable to update it in the factor graph if needed. Alternatively use setTimestamp!. See issue #315.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setUserData!-Tuple{AbstractDFG,Dict{Symbol,String}}","page":"Reference","title":"DistributedFactorGraphs.setUserData!","text":"setUserData!(dfg, data)\n\n\nSet the user data associated with the graph.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.sortDFG-Tuple{Array{#s19,1} where #s19<:DFGNode}","page":"Reference","title":"DistributedFactorGraphs.sortDFG","text":"sortDFG(vars; by, kwargs...)\n\n\nConvenience wrapper for Base.sort. Sort variable (factor) lists in a meaningful way (by timestamp, label, etc), for example [:april;:x1_3;:x1_6;] Defaults to sorting by timestamp for variables and factors and using natural_lt for Symbols. See Base.sort for more detail.\n\nNotes\n\nNot fool proof, but does better than native sort.\n\nExample\n\nsortDFG(ls(dfg)) sortDFG(ls(dfg), by=getLabel, lt=natural_lt)\n\nRelated\n\nls, lsf\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.toDot-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.toDot","text":"toDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.toDot-Tuple{GraphsDFG}","page":"Reference","title":"DistributedFactorGraphs.toDot","text":"toDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.toDotFile","page":"Reference","title":"DistributedFactorGraphs.toDotFile","text":"toDotFile(dfg)\ntoDotFile(dfg, fileName)\n\n\nProduces a dot file of the graph for visualization. Download XDot to see the data\n\nNote\n\nDefault location \"/tmp/dfg.dot\" – MIGHT BE REMOVED\nCan be viewed with the xdot system application.\nBased on graphviz.org\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateBigData!-Union{Tuple{E}, Tuple{D}, Tuple{T}, Tuple{D,E,T}} where E<:AbstractBigDataEntry where D<:AbstractDataStore{T} where T","page":"Reference","title":"DistributedFactorGraphs.updateBigData!","text":"updateBigData!(store, entry, data)\n\n\nUpdate the data in the store. The function will error and return nothing if the entry does not exist.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateBigDataEntry!-Tuple{AbstractDFGVariable,AbstractBigDataEntry}","page":"Reference","title":"DistributedFactorGraphs.updateBigDataEntry!","text":"updateBigDataEntry!(var, bde)\n\n\nUpdate big data entry\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateFactor!-Union{Tuple{F}, Tuple{G}, Tuple{G,F}} where F<:AbstractDFGFactor where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.updateFactor!","text":"Update a complete DFGFactor in the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!","page":"Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, sourceVariable)\nupdatePPE!(dfg, sourceVariable, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it. NOTE: Copies the PPE data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!","page":"Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, sourceVariables)\nupdatePPE!(dfg, sourceVariables, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updatePPE!-Union{Tuple{P}, Tuple{AbstractDFG,Symbol,P}, Tuple{AbstractDFG,Symbol,P,Symbol}} where P<:AbstractPointParametricEst","page":"Reference","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, variablekey, ppe)\nupdatePPE!(dfg, variablekey, ppe, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateVariable!-Union{Tuple{V}, Tuple{G}, Tuple{G,V}} where V<:AbstractDFGVariable where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.updateVariable!","text":"Update a complete DFGVariable in the DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.updateVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, variablekey, vnd)\nupdateVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, sourceVariables)\nupdateVariableSolverData!(dfg, sourceVariables, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.updateVariableSolverData!","page":"Reference","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, sourceVariable)\nupdateVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.GraphsNode","page":"Reference","title":"DistributedFactorGraphs.GraphsNode","text":"mutable struct GraphsNode\n\nEncapsulation structure for a DFGNode (Variable or Factor) in Graphs.jl graph.\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs._bindSessionNodeToInitialVariable-Tuple{Neo4jInstance,String,String,String,String}","page":"Reference","title":"DistributedFactorGraphs._bindSessionNodeToInitialVariable","text":"_bindSessionNodeToInitialVariable(neo4jInstance, userId, robotId, sessionId, initialVariableLabel)\n\n\nBind the SESSION node to the inital variable. Checks for existence.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._copyIntoGraph!-Union{Tuple{H}, Tuple{G}, Tuple{G,H,Array{Symbol,1}}, Tuple{G,H,Array{Symbol,1},Bool}} where H<:AbstractDFG where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs._copyIntoGraph!","text":"_copyIntoGraph!(sourceDFG, destDFG, variableFactorLabels)\n_copyIntoGraph!(sourceDFG, destDFG, variableFactorLabels, includeOrphanFactors; copyGraphMetadata)\n\n\nCommon function for copying nodes from one graph into another graph. This is overridden in specialized implementations for performance. NOTE: copyGraphMetadata not supported yet.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._createNode","page":"Reference","title":"DistributedFactorGraphs._createNode","text":"_createNode(neo4jInstance, labels, properties, parentNode)\n_createNode(neo4jInstance, labels, properties, parentNode, relationshipLabel)\n\n\nCreate a node and optionally specify a parent. Note: Using symbols so that the labels obey Neo4j requirements\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs._dictToNeo4jProps-Tuple{Dict{String,Any}}","page":"Reference","title":"DistributedFactorGraphs._dictToNeo4jProps","text":"_dictToNeo4jProps(dict)\n\n\nBuild a Cypher-compliant set of properies from a JSON dictionary. Note individual values are serialized if they are not already.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getLabelsForInst-Union{Tuple{ABDE}, Tuple{APPE}, Tuple{N}, Tuple{CloudGraphsDFG,Union{Robot, Session, User, N, APPE, ABDE}}} where ABDE<:AbstractBigDataEntry where APPE<:AbstractPointParametricEst where N<:DFGNode","page":"Reference","title":"DistributedFactorGraphs._getLabelsForInst","text":"_getLabelsForInst(dfg, inst; parentKey)\n\n\nGet the Neo4j labels for any node instance.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getLabelsForType-Tuple{CloudGraphsDFG,Type}","page":"Reference","title":"DistributedFactorGraphs._getLabelsForType","text":"_getLabelsForType(dfg, type; parentKey)\n\n\nGet the Neo4j labels for any node type.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getLabelsFromCyphonQuery","page":"Reference","title":"DistributedFactorGraphs._getLabelsFromCyphonQuery","text":"_getLabelsFromCyphonQuery(neo4jInstance, matchCondition)\n_getLabelsFromCyphonQuery(neo4jInstance, matchCondition, orderProperty)\n\n\nReturns the list of CloudGraph nodes that matches the Cyphon query. The nodes of interest should be labelled 'node' because the query will use the return of id(node) #Example matchCondition = '(u:User)-[:ROBOT]->(n:Robot:NewRobot)-[:SESSION]->(node:Session)'. Will return all sessions because of 'node:Session'. If orderProperty is not ==, then 'order by n.{orderProperty} will be appended to the query'. So can make orderProperty = label or id.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs._getNeoNodesFromCyphonQuery","page":"Reference","title":"DistributedFactorGraphs._getNeoNodesFromCyphonQuery","text":"_getNeoNodesFromCyphonQuery(neo4jInstance, matchCondition)\n_getNeoNodesFromCyphonQuery(neo4jInstance, matchCondition, orderProperty)\n\n\nReturns the list of CloudGraph nodes that matches the Cyphon query. The nodes of interest should be labelled 'node' because the query will use the return of id(node) #Example matchCondition = '(u:User)-[:ROBOT]->(n:Robot:NewRobot)-[:SESSION]->(node:Session)'. Will return all sessions because of 'node:Session'. If orderProperty is not ==, then 'order by n.{orderProperty} will be appended to the query'. So can make orderProperty = label or id.\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs._getNodeProperty-Tuple{Neo4jInstance,Array{String,1},String}","page":"Reference","title":"DistributedFactorGraphs._getNodeProperty","text":"_getNodeProperty(neo4jInstance, nodeLabels, property)\n\n\nGet a node property - returns nothing if not found\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getNodeTags-Tuple{Neo4jInstance,Array{String,1}}","page":"Reference","title":"DistributedFactorGraphs._getNodeTags","text":"_getNodeTags(neo4jInstance, nodeLabels)\n\n\nGet a node's tags\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getSessionNeoNodesForRobot-Tuple{Neo4jInstance,String,String}","page":"Reference","title":"DistributedFactorGraphs._getSessionNeoNodesForRobot","text":"_getSessionNeoNodesForRobot(neo4jInstance, userId, robotId)\n\n\nUtility function to get a Neo4j node sessions for a robot.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._queryNeo4j-Tuple{Neo4jInstance,String}","page":"Reference","title":"DistributedFactorGraphs._queryNeo4j","text":"_queryNeo4j(neo4jInstance, query)\n\n\nReturns the transaction for a given query. NOTE: Must commit(transaction) after you're done.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._setNodeProperty-Tuple{Neo4jInstance,Array{String,1},String,Union{Float64, Int64, String}}","page":"Reference","title":"DistributedFactorGraphs._setNodeProperty","text":"_setNodeProperty(neo4jInstance, nodeLabels, property, value)\n\n\nSet a node property - returns count of changed nodes.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._tryGetNeoNodeIdFromNodeLabel-Tuple{Neo4jInstance,String,String,String,Symbol}","page":"Reference","title":"DistributedFactorGraphs._tryGetNeoNodeIdFromNodeLabel","text":"_tryGetNeoNodeIdFromNodeLabel(neo4jInstance, userId, robotId, sessionId, nodeLabel)\n\n\nTry get a Neo4j node ID from a node label.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._uniqueKey-Union{Tuple{V}, Tuple{G}, Tuple{G,V,Symbol}} where V<:AbstractDFGVariable where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs._uniqueKey","text":"_uniqueKey(dfg, v, key)\n\n\nInternal function to generate a unique key for the entry - userIdrobotIdsessionIdvariablekey. Simple symbol.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getAdjacencyMatrixSymbols-Tuple{AbstractDFG}","page":"Reference","title":"DistributedFactorGraphs.getAdjacencyMatrixSymbols","text":"getAdjacencyMatrixSymbols(dfg; solvable)\n\n\nGet a matrix indicating relationships between variables and factors. Rows are all factors, columns are all variables, and each cell contains either nothing or the symbol of the relating factor. The first row and first column are factor and variable headings respectively. Note: rather use getBiadjacencyMatrix\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.getTypeFromSerializationModule-Union{Tuple{G}, Tuple{G,Symbol}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.getTypeFromSerializationModule","text":"Get a type from the serialization module inside DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.packPPE-Union{Tuple{P}, Tuple{G}, Tuple{G,P}} where P<:AbstractPointParametricEst where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.packPPE","text":"packPPE(dfg, ppe)\n\n\nPack a PPE into a Dict{String, Any}.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setRobotId!-Tuple{AbstractDFG,String}","page":"Reference","title":"DistributedFactorGraphs.setRobotId!","text":"setRobotId!(dfg, robotId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setSessionId!-Tuple{AbstractDFG,String}","page":"Reference","title":"DistributedFactorGraphs.setSessionId!","text":"setSessionId!(dfg, sessionId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.setUserId!-Tuple{AbstractDFG,String}","page":"Reference","title":"DistributedFactorGraphs.setUserId!","text":"setUserId!(dfg, userId)\n\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.unpackPPE-Union{Tuple{G}, Tuple{G,Dict{String,Any}}} where G<:AbstractDFG","page":"Reference","title":"DistributedFactorGraphs.unpackPPE","text":"unpackPPE(dfg, packedPPE)\n\n\nUnpack a Dict{String, Any} into a PPE.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG","page":"Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"An in-memory DistributedFactorGraph based on LightGraphs.jl with parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"type"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG-Union{Tuple{}, Tuple{DistributedFactorGraphs.LightDFGs.FactorGraphs.FactorGraph{Int64,DFGVariable,DFGFactor}}, Tuple{T}} where T<:AbstractParams","page":"Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"LightDFG()\nLightDFG(g; params, kwargs...)\n\n\nCreate an in-memory LightDFG with the following parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.LightDFG-Union{Tuple{}, Tuple{DistributedFactorGraphs.LightDFGs.FactorGraphs.FactorGraph{Int64,V,F}}, Tuple{F}, Tuple{V}, Tuple{T}} where F<:AbstractDFGFactor where V<:AbstractDFGVariable where T<:AbstractParams","page":"Reference","title":"DistributedFactorGraphs.LightDFGs.LightDFG","text":"LightDFG()\n\n\nCreate an in-memory LightDFG with the following parameters:\n\nT: Solver parameters (defaults to NoSolverParams())\nV: Variable type\nF: Factor type\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.LightDFGs.savedot_attributes-Tuple{IO,LightDFG}","page":"Reference","title":"DistributedFactorGraphs.LightDFGs.savedot_attributes","text":"savedot_attributes(io, dfg)\n\n\nA replacement for to_dot that saves only hardcoded factor graph plotting attributes.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs._getDuplicatedEmptyDFG-Union{Tuple{LightDFG{P,V,F}}, Tuple{F}, Tuple{V}, Tuple{P}} where F<:AbstractDFGFactor where V<:AbstractDFGVariable where P<:AbstractParams","page":"Reference","title":"DistributedFactorGraphs._getDuplicatedEmptyDFG","text":"_getDuplicatedEmptyDFG(dfg)\n\n\nGets an empty and unique LightDFG derived from an existing DFG.\n\n\n\n\n\n","category":"method"},{"location":"func_ref/#DistributedFactorGraphs.DFGPlots.dfgplot","page":"Reference","title":"DistributedFactorGraphs.DFGPlots.dfgplot","text":"dfgplot(dfg)\ndfgplot(dfg, p)\n\n\nPlots the structure of the factor graph. GraphPlot must be imported before DistributedFactoGraphs for these functions to be available. Returns the plot context.\n\nE.g.\n\nusing GraphPlot\nusing DistributedFactorGraphs, DistributedFactorGraphs.DFGPlots\n# ... Make graph...\n# Using GraphViz plotting\ndfgplot(fg)\n# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(fg))\n\nMore information at GraphPlot.jl\n\n\n\n\n\n","category":"function"},{"location":"func_ref/#DistributedFactorGraphs.DFGPlots.dfgplot","page":"Reference","title":"DistributedFactorGraphs.DFGPlots.dfgplot","text":"dfgplot(dfg)\ndfgplot(dfg, p)\n\n\nPlots the structure of the factor graph. GraphPlot must be imported before DistributedFactorGraphs for these functions to be available. Returns the plot context.\n\nE.g.\n\nusing GraphPlot\nusing DistributedFactorGraphs, DistributedFactorGraphs.DFGPlots\n# ... Make graph...\n# Using GraphViz plotting\ndfgplot(fg)\n# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(fg))\n\nMore information at GraphPlot.jl\n\n\n\n\n\n","category":"function"},{"location":"SavingData/#Saving-and-Loading-Graphs-1","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"","category":"section"},{"location":"SavingData/#","page":"Saving and Loading Graphs","title":"Saving and Loading Graphs","text":"Data can be saved and loaded from disk using FileDFG.","category":"page"},{"location":"SavingData/#Saving-Data-1","page":"Saving and Loading Graphs","title":"Saving Data","text":"","category":"section"},{"location":"SavingData/#Loading-Data-1","page":"Saving and Loading Graphs","title":"Loading Data","text":"","category":"section"},{"location":"apis/graphs/#The-Graphs.jl-DistributedFactorGraph-API-1","page":"Graphs.jl","title":"The Graphs.jl DistributedFactorGraph API","text":"","category":"section"},{"location":"DrawingGraphs/#Drawing-Graphs-1","page":"Drawing Graphs","title":"Drawing Graphs","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Graphs can be visualized by using either GraphPlot or rendering to .dot files (which can be viewed using xdot).","category":"page"},{"location":"DrawingGraphs/#GraphPlot-1","page":"Drawing Graphs","title":"GraphPlot","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"GraphPlot plotting is available if GraphPlot is imported before DFG is imported. Install GraphPlot using the following command:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using Pkg\nPkg.install(\"GraphPlot\")","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Then bring GraphPlot in before DFG:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using GraphPlot\nusing DistributedFactorGraphs","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Any factor graph can then be drawn by calling dfgPlot:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n\n# Plot graph\ndfgplot(dfg)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"(Image: imgs/initialgraph.jpg)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"dfgplot","category":"page"},{"location":"DrawingGraphs/#DistributedFactorGraphs.DFGPlots.dfgplot","page":"Drawing Graphs","title":"DistributedFactorGraphs.DFGPlots.dfgplot","text":"dfgplot(dfg)\ndfgplot(dfg, p)\n\n\nPlots the structure of the factor graph. GraphPlot must be imported before DistributedFactorGraphs for these functions to be available. Returns the plot context.\n\nE.g.\n\nusing GraphPlot\nusing DistributedFactorGraphs, DistributedFactorGraphs.DFGPlots\n# ... Make graph...\n# Using GraphViz plotting\ndfgplot(fg)\n# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(fg))\n\nMore information at GraphPlot.jl\n\n\n\n\n\ndfgplot(dfg)\ndfgplot(dfg, p)\n\n\nPlots the structure of the factor graph. GraphPlot must be imported before DistributedFactoGraphs for these functions to be available. Returns the plot context.\n\nE.g.\n\nusing GraphPlot\nusing DistributedFactorGraphs, DistributedFactorGraphs.DFGPlots\n# ... Make graph...\n# Using GraphViz plotting\ndfgplot(fg)\n# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(fg))\n\nMore information at GraphPlot.jl\n\n\n\n\n\n","category":"function"},{"location":"DrawingGraphs/#Rendering-GraphPlot-to-PDF-1","page":"Drawing Graphs","title":"Rendering GraphPlot to PDF","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"The graph can be rendered to PDF or JPG in the following way:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"# Save to PDF\nusing Compose\ndraw(PDF(\"/tmp/graph.pdf\", 16cm, 16cm), dfgplot(dfg))","category":"page"},{"location":"DrawingGraphs/#More-Information-1","page":"Drawing Graphs","title":"More Information","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"More information at GraphPlot.jl","category":"page"},{"location":"DrawingGraphs/#Dot-Files-1","page":"Drawing Graphs","title":"Dot Files","text":"","category":"section"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Dot files are a standard format for visualizing graphs and applications such as xdot are available to view the files. Dot plotting does not require GraphPlot and can be drawn by either:","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"Calling toDot on any graph to produce a string of the graph\nCalling toDotFile on any graph to save it directly to a dotfile","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"using DistributedFactorGraphs\n# Construct graph using IIF\nusing IncrementalInference\n# Create graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\nv1 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nv2 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nv3 = addVariable!(dfg, :l0, ContinuousScalar, labels = [:LANDMARK], solvable=1)\nprior = addFactor!(dfg, [:x0], Prior(Normal(0,1)))\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x0], LinearConditional(Normal(40.0,5.0)), solvable=1)\nf1 = addFactor!(dfg, [:l0; :x1], LinearConditional(Normal(-10.0,5.0)), solvable=1)\n# Save to dot file\ntoDotFile(dfg, \"/tmp/test.dot\")\n# Open with xdot\nrun(`xdot /tmp/test.dot`)","category":"page"},{"location":"DrawingGraphs/#","page":"Drawing Graphs","title":"Drawing Graphs","text":"toDot\ntoDotFile","category":"page"},{"location":"DrawingGraphs/#DistributedFactorGraphs.toDot","page":"Drawing Graphs","title":"DistributedFactorGraphs.toDot","text":"toDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\ntoDot(dfg)\n\n\nProduces a dot-format of the graph for visualization.\n\n\n\n\n\n","category":"function"},{"location":"DrawingGraphs/#DistributedFactorGraphs.toDotFile","page":"Drawing Graphs","title":"DistributedFactorGraphs.toDotFile","text":"toDotFile(dfg)\ntoDotFile(dfg, fileName)\n\n\nProduces a dot file of the graph for visualization. Download XDot to see the data\n\nNote\n\nDefault location \"/tmp/dfg.dot\" – MIGHT BE REMOVED\nCan be viewed with the xdot system application.\nBased on graphviz.org\n\n\n\n\n\n","category":"function"},{"location":"DataStructure/#Data-Structure-1","page":"Data Structure","title":"Data Structure","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Variables and factors can potentially contain a lot of data, so DFG has different structures that are specialized for each use-case and level of detail. For example, if you  want to retrieve just a simple summary of the structure, you can use the summary or skeleton structures to identify variables and factors of interest and then retrieve more detail on the subset.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Note that drivers support all of the structures.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"The following section discusses the datastructures for each level. A quick summary of the types and the available properties (some of which are derived) is provided below.","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Accessible properties for each of the variable structures:","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"|                     | Label | Timestamp | Tags | Estimates | Soft Type | Solvable | Solver Data | Small Data | Big Data Entries | |––––––––––-|–––-|–––––-|–––|–––––-|–––––-|–––––|––––––-|––––––|–––––––––| | SkeletonDFGVariable | X     |           | X    |           |           |          |             |            |                  | | DFGVariableSummary  | X     | X         | X    | X         | Symbol    |          |             |            | X                | | DFGVariable         | X     | X         | X    | X         | X         | X        | X           | X          | X                |","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Accessible properties for each of the factor structures:","category":"page"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"|                   | Label | Timestamp | Tags | Factor Type | Solvable | Solver Data | |–––––––––-|–––-|–––––-|–––|––––––-|–––––|––––––-| | SkeletonDFGFactor | X     |           | X    |             |          |             | | DFGFactorSummary  | X     | X         | X    |             |          |             | | DFGFactor         | X     | X         | X    | X           | X        | X           |","category":"page"},{"location":"DataStructure/#DFG-Skeleton-1","page":"Data Structure","title":"DFG Skeleton","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"SkeletonDFGVariable\nSkeletonDFGFactor","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.SkeletonDFGVariable","page":"Data Structure","title":"DistributedFactorGraphs.SkeletonDFGVariable","text":"struct SkeletonDFGVariable <: AbstractDFGVariable\n\nSkeleton variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.SkeletonDFGFactor","page":"Data Structure","title":"DistributedFactorGraphs.SkeletonDFGFactor","text":"struct SkeletonDFGFactor <: AbstractDFGFactor\n\nSkeleton factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DFG-Summary-1","page":"Data Structure","title":"DFG Summary","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"DFGVariableSummary\nDFGFactorSummary","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.DFGVariableSummary","page":"Data Structure","title":"DistributedFactorGraphs.DFGVariableSummary","text":"struct DFGVariableSummary <: AbstractDFGVariable\n\nSummary variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\nppeDict::Dict{Symbol,#s23} where #s23<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nsofttypename::Symbol\nSymbol for the softtype for the underlying variable. Accessor: getSofttype\nbigData::Dict{Symbol,AbstractBigDataEntry}\nDictionary of large data associated with this variable. Accessors: addBigDataEntry!, getBigDataEntry, updateBigDataEntry!, and deleteBigDataEntry!\n_internalId::Int64\nInternal ID used by some of the DFG drivers. We don't suggest using this outside of DFG.\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.DFGFactorSummary","page":"Data Structure","title":"DistributedFactorGraphs.DFGFactorSummary","text":"struct DFGFactorSummary <: AbstractDFGFactor\n\nRead-only summary factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\n_internalId::Int64\nInternal ID used by some of the DFG drivers. We don't suggest using this outside of DFG.\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#Full-DFG-Node-1","page":"Data Structure","title":"Full DFG Node","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"DFGVariable\nDFGFactor","category":"page"},{"location":"DataStructure/#DistributedFactorGraphs.DFGVariable","page":"Data Structure","title":"DistributedFactorGraphs.DFGVariable","text":"struct DFGVariable{T<:InferenceVariable} <: AbstractDFGVariable\n\nComplete variable structure for a DistributedFactorGraph variable.\n\n\n\nFields:\n\nlabel::Symbol\nVariable label, e.g. :x1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\ntags::Set{Symbol}\nVariable tags, e.g [:POSE, :VARIABLE, and :LANDMARK]. Accessors: getTags, mergeTags!, and removeTags!\nppeDict::Dict{Symbol,#s17} where #s17<:AbstractPointParametricEst\nDictionary of parametric point estimates keyed by solverDataDict keys Accessors: addPPE!, updatePPE!, and deletePPE!\nsolverDataDict::Dict{Symbol,VariableNodeData{T}} where T<:InferenceVariable\nDictionary of solver data. May be a subset of all solutions if a solver key was specified in the get call. Accessors: addVariableSolverData!, updateVariableSolverData!, and deleteVariableSolverData!\nsmallData::Dict{String,String}\nDictionary of small data associated with this variable. Accessors: getSmallData, setSmallData!\nbigData::Dict{Symbol,AbstractBigDataEntry}\nDictionary of large data associated with this variable. Accessors: addBigDataEntry!, getBigDataEntry, updateBigDataEntry!, and deleteBigDataEntry!\n_dfgNodeParams::DFGNodeParams\nMutable parameters for the variable. We suggest using accessors to get to this data. Accessors: getSolvable, setSolvable!\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#DistributedFactorGraphs.DFGFactor","page":"Data Structure","title":"DistributedFactorGraphs.DFGFactor","text":"mutable struct DFGFactor{T, S} <: AbstractDFGFactor\n\nComplete factor structure for a DistributedFactorGraph factor.\n\n\n\nFields:\n\nlabel::Symbol\nFactor label, e.g. :x1f1. Accessor: getLabel\ntimestamp::Dates.DateTime\nVariable timestamp. Accessors: getTimestamp, setTimestamp\ntags::Set{Symbol}\nFactor tags, e.g [:FACTOR]. Accessors: getTags, mergeTags!, and removeTags!\nsolverData::GenericFunctionNodeData\nSolver data. Accessors: getSolverData, setSolverData!\nsolvable::Int64\nSolvable flag for the factor. Accessors: getSolvable, setSolvable! TODO: Switch to DFGNodeParams\n_dfgNodeParams::DFGNodeParams\nMutable parameters for the variable. We suggest using accessors to get to this data. Accessors: getSolvable, setSolvable!\n_variableOrderSymbols::Array{Symbol,1}\nInternal cache of the ordering of the neighbor variables. Rather use getNeighbors to get the list as this is an internal value. Accessors: getVariableOrder\n\n\n\n\n\n","category":"type"},{"location":"DataStructure/#Additional-Offloaded-Data-1","page":"Data Structure","title":"Additional Offloaded Data","text":"","category":"section"},{"location":"DataStructure/#","page":"Data Structure","title":"Data Structure","text":"Additional, larger data can be associated with variables using keyed big data entries.  ","category":"page"},{"location":"variable_factor_serialization/#Serialization-of-Variables-and-Factors-1","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"If you are transferring variables and factors over a wire you need to serialize and deserialize variables and factors.","category":"page"},{"location":"variable_factor_serialization/#Packing-and-Unpacking-1","page":"Serialization of Variables and Factors","title":"Packing and Unpacking","text":"","category":"section"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Packing is done with the exposed functions packVariable()::Dict{String, Any} and packFactor()::Dict{String, Any}. You can then serialize this into a string or JSON as you would normally.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"Note: When you deserialize a factor and want to use it for solving, you must call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor) to reinflate it completely. Please review FileDFG service for an example.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"For example:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Now serialize them:\npVariable = packVariable(dfg, x0)\npFactor = packFactor(dfg, prior)\n\n# And we can deserialize them\nupVariable = unpackVariable(dfg, pVariable)\n# FYI: The graph is used in unpackFactor to find the variables that the factor links to.\nupFactor = unpackFactor(dfg, pFactor, IncrementalInference)\n# Note, you need to call IncrementalInference.rebuildFactorMetadata!(dfgLoadInto, factor)\n# to make it useable. Please add an issue if this poses a problem or causes issues.","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"As a more complex example, we can use JSON2 to stringify the data and write it to a folder of files as FileDFG does:","category":"page"},{"location":"variable_factor_serialization/#","page":"Serialization of Variables and Factors","title":"Serialization of Variables and Factors","text":"using DistributedFactorGraphs\nusing IncrementalInference, RoME\n\n# Make a variable and a factor:\n# Make a simple graph\ndfg = GraphsDFG{SolverParams}(params=SolverParams())\n# Add the first pose :x0\nx0 = addVariable!(dfg, :x0, Pose2)\n# Add at a fixed location PriorPose2 to pin :x0 to a starting location (10,10, pi/4)\nprior = addFactor!(dfg, [:x0], PriorPose2( MvNormal([10; 10; 1.0/8.0], Matrix(Diagonal([0.1;0.1;0.05].^2))) ) )\n\n# Slightly fancier example: We can use JSON2, we can serialize to a string\nvarFolder = \"/tmp\"\nfor v in getVariables(dfg)\n    vPacked = packVariable(dfg, v)\n    io = open(\"$varFolder/$(v.label).json\", \"w\")\n    JSON2.write(io, vPacked)\n    close(io)\nend\n# Factors\nfor f in getFactors(dfg)\n    fPacked = packFactor(dfg, f)\n    io = open(\"$folder/factors/$(f.label).json\", \"w\")\n    JSON2.write(io, fPacked)\n    close(io)\nend","category":"page"},{"location":"GraphData/#Using-Graph-Elements-1","page":"Using Graph Data","title":"Using Graph Elements","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Variables and factors in DistributedFactorGraphs are used for a variety of different applications. We have tried to compartmentalize the data as much as possible so that users do not need to dig around to find what they need (it's a work in progress).","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"There are three fundamental types of data in DFG:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Variable and factor data (stored in the nodes themselves)\nOffloaded big data elements (keyed in a variable or factor, but stored in another location)\nGraph data (data that is related to the graph itself)","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The following is a guideline to using these parameters.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: Some functions are direct accessors to the internal parameters, others are derived functions (e.g. getLabel(v) = v.label). In other cases the accessors are simplified ways to interact with the structures. We recommend using the accessors as the internal structure may change over time.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: Adds in general throw an error if the element already exists. Update will update the element if it exists, otherwise it will add it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: In general these functions will return an error if the respective element is not found. This is to avoid returning, say, nothing, which will be horribly confusing if you tried getVariableSolverData(dfg, :a, :b) and it returned nothing - which was missing, :a or :b, or was there a communication issue? We recommend coding defensively and trapping errors in critical portions of your user code.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"NOTE: All data is passed by reference, so if you update the returned structure it will update in the graph. The database driver is an exception, and once the variable or factor is updated you need to call update* to persist the changes to the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The following examples make use this data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"using IncrementalInference\n# Create a DFG with default solver parameters using the LightGraphs.jl driver.\ndfg = LightDFG{SolverParams}(params=SolverParams())\n\nx0 = addVariable!(dfg, :x0, ContinuousScalar, labels = [:POSE], solvable=1)\nx1 = addVariable!(dfg, :x1, ContinuousScalar, labels = [:POSE], solvable=1)\nf1 = addFactor!(dfg, [:x0; :x1], LinearConditional(Normal(50.0,2.0)), solvable=1)","category":"page"},{"location":"GraphData/#Variable-and-Factor-Elements-1","page":"Using Graph Data","title":"Variable and Factor Elements","text":"","category":"section"},{"location":"GraphData/#Common-Elements-1","page":"Using Graph Data","title":"Common Elements","text":"","category":"section"},{"location":"GraphData/#Labels-1","page":"Using Graph Data","title":"Labels","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Labels are the principle identifier of a variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getLabel","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getLabel","page":"Using Graph Data","title":"DistributedFactorGraphs.getLabel","text":"getLabel(v)\n\n\nReturn the label for a DFGNode.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Timestamps-1","page":"Using Graph Data","title":"Timestamps","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Each variable or factor can have a timestamp associated with it.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getTimestamp\nsetTimestamp","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getTimestamp","page":"Using Graph Data","title":"DistributedFactorGraphs.getTimestamp","text":"getTimestamp(v)\n\n\nGet the timestamp of a DFGNode.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setTimestamp","page":"Using Graph Data","title":"DistributedFactorGraphs.setTimestamp","text":"setTimestamp(v, ts; verbose)\n\n\nSet the timestamp of a DFGVariable object returning a new DFGVariable. Note: Since the timestamp field is not mutable setTimestamp returns a new variable with the updated timestamp (note the absence of !). Use updateVariable! on the returened variable to update it in the factor graph if needed. Alternatively use setTimestamp!. See issue #315.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Tags-1","page":"Using Graph Data","title":"Tags","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Tags are a set of symbols that contain identifiers for the variable or factor.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"listTags\nmergeTags!\nremoveTags!\nemptyTags!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.listTags","page":"Using Graph Data","title":"DistributedFactorGraphs.listTags","text":"listTags(dfg, sym)\n\n\nReturn the tags for a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.mergeTags!","page":"Using Graph Data","title":"DistributedFactorGraphs.mergeTags!","text":"mergeTags!(dfg, sym, tags)\n\n\nMerge add tags to a variable or factor (union)\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.removeTags!","page":"Using Graph Data","title":"DistributedFactorGraphs.removeTags!","text":"removeTags!(dfg, sym, tags)\n\n\nRemove the tags from the node (setdiff)\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.emptyTags!","page":"Using Graph Data","title":"DistributedFactorGraphs.emptyTags!","text":"emptyTags!(dfg, sym)\n\n\nEmpty all tags from the node (empty)\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Solvable-1","page":"Using Graph Data","title":"Solvable","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The solvable flag indicates whether the solver should make use of the variable or factor while solving the graph. This can be used to construct graphs in chunks while solving asynchronously, or for selectively solving portions of the graph.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSolvable\nsetSolvable!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getSolvable","page":"Using Graph Data","title":"DistributedFactorGraphs.getSolvable","text":"getSolvable(var)\n\n\nVariables or factors may or may not be 'solvable', depending on a user definition.  Useful for ensuring atomic transactions.\n\nRelated:\n\nisSolveInProgress\n\n\n\n\n\ngetSolvable(dfg, sym)\n\n\nGet 'solvable' parameter for either a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setSolvable!","page":"Using Graph Data","title":"DistributedFactorGraphs.setSolvable!","text":"setSolvable!(node, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\nsetSolvable!(dfg, sym, solvable)\n\n\nSet the solvable parameter for either a variable or factor.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Variables-1","page":"Using Graph Data","title":"Variables","text":"","category":"section"},{"location":"GraphData/#Soft-Type-1","page":"Using Graph Data","title":"Soft Type","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"The soft type is the underlying inference variable type, such as a Pose2.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSofttype","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getSofttype","page":"Using Graph Data","title":"DistributedFactorGraphs.getSofttype","text":"getSofttype(vnd)\n\n\nVariable nodes softtype information holding a variety of meta data associated with the type of variable stored in that node of the factor graph.\n\nRelated\n\ngetVariableType\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#Packed-Parametric-Estimates-1","page":"Using Graph Data","title":"Packed Parametric Estimates","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Solved graphs contain packed parametric estimates for the variables, which are keyed by the solution (the default is saved as :default).","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"For each PPE structure, there are accessors for getting individual values:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getMaxPPE\ngetMeanPPE\ngetSuggestedPPE","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getMaxPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.getMaxPPE","text":"getMaxPPE(est)\n\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getMeanPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.getMeanPPE","text":"getMeanPPE(est)\n\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getSuggestedPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.getSuggestedPPE","text":"getSuggestedPPE(est)\n\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Related functions for getting, adding/updating, and deleting PPE structures:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"listPPE\ngetPPE\naddPPE!\nupdatePPE!\ndeletePPE!\nmergePPEs!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.listPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.listPPE","text":"listPPE(dfg, variablekey)\n\n\nList all the PPE data keys in the variable.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getPPE","page":"Using Graph Data","title":"DistributedFactorGraphs.getPPE","text":"getPPE(vari)\ngetPPE(vari, solveKey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated\n\ngetMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\ngetPPE(dfg, variablekey)\ngetPPE(dfg, variablekey, ppekey)\n\n\nGet the parametric point estimate (PPE) for a variable in the factor graph for a given solve key.\n\nNotes\n\nDefaults on keywords solveKey and method\n\nRelated getMeanPPE, getMaxPPE, getKDEMean, getKDEFit, getPPEs, getVariablePPEs\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.addPPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.addPPE!","text":"Add variable PPE, errors if it already exists.\n\n\n\n\n\naddPPE!(dfg, sourceVariable)\naddPPE!(dfg, sourceVariable, ppekey)\n\n\nAdd a new PPE entry from a deepcopy of the source variable PPE. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.updatePPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.updatePPE!","text":"updatePPE!(dfg, variablekey, ppe)\nupdatePPE!(dfg, variablekey, ppe, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\nupdatePPE!(dfg, sourceVariable)\nupdatePPE!(dfg, sourceVariable, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it. NOTE: Copies the PPE data.\n\n\n\n\n\nupdatePPE!(dfg, sourceVariables)\nupdatePPE!(dfg, sourceVariables, ppekey)\n\n\nUpdate PPE data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.deletePPE!","page":"Using Graph Data","title":"DistributedFactorGraphs.deletePPE!","text":"deletePPE!(dfg, variablekey)\ndeletePPE!(dfg, variablekey, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\ndeletePPE!(dfg, sourceVariable)\ndeletePPE!(dfg, sourceVariable, ppekey)\n\n\nDelete PPE data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.mergePPEs!","page":"Using Graph Data","title":"DistributedFactorGraphs.mergePPEs!","text":"mergePPEs!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of PPE operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"# Add a new PPE of type MeanMaxPPE to :x0\nppe = MeanMaxPPE(:default, [0.0], [0.0], [0.0])\naddPPE!(dfg, :x0, ppe)\n@show listPPE(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nv = getPPE(dfg, :x0, :default)\n# Delete it\ndeletePPE!(dfg, :x0, :default)\n# Update add it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Update update it\nupdatePPE!(dfg, :x0, ppe, :default)\n# Bulk copy PPE's for x0 and x1\nupdatePPE!(dfg, [x0], :default)","category":"page"},{"location":"GraphData/#Solver-Data-1","page":"Using Graph Data","title":"Solver Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Solver data is used by IncrementalInference/RoME/Caesar solver to produce the above PPEs.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Related functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"listVariableSolverData\ngetVariableSolverData\naddVariableSolverData!\nupdateVariableSolverData!\ndeleteVariableSolverData!\nmergeVariableSolverData!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.listVariableSolverData","page":"Using Graph Data","title":"DistributedFactorGraphs.listVariableSolverData","text":"listVariableSolverData(dfg, variablekey)\n\n\nList all the solver data keys in the variable.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getVariableSolverData","page":"Using Graph Data","title":"DistributedFactorGraphs.getVariableSolverData","text":"getVariableSolverData(dfg, variablekey)\ngetVariableSolverData(dfg, variablekey, solvekey)\n\n\nGet variable solverdata for a given solve key.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.addVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.addVariableSolverData!","text":"addVariableSolverData!(dfg, variablekey, vnd)\naddVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nAdd variable solver data, errors if it already exists.\n\n\n\n\n\naddVariableSolverData!(dfg, sourceVariable)\naddVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nAdd a new solver data  entry from a deepcopy of the source variable solver data. NOTE: Copies the solver data.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.updateVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.updateVariableSolverData!","text":"updateVariableSolverData!(dfg, variablekey, vnd)\nupdateVariableSolverData!(dfg, variablekey, vnd, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\nupdateVariableSolverData!(dfg, sourceVariable)\nupdateVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it. NOTE: Copies the solver data.\n\n\n\n\n\nupdateVariableSolverData!(dfg, sourceVariables)\nupdateVariableSolverData!(dfg, sourceVariables, solvekey)\n\n\nUpdate variable solver data if it exists, otherwise add it.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.deleteVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.deleteVariableSolverData!","text":"deleteVariableSolverData!(dfg, variablekey)\ndeleteVariableSolverData!(dfg, variablekey, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\ndeleteVariableSolverData!(dfg, sourceVariable)\ndeleteVariableSolverData!(dfg, sourceVariable, solvekey)\n\n\nDelete variable solver data, returns the deleted element.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.mergeVariableSolverData!","page":"Using Graph Data","title":"DistributedFactorGraphs.mergeVariableSolverData!","text":"mergeVariableSolverData!(destVariable, sourceVariable)\n\n\nMerges and updates solver and estimate data for a variable (variable can be from another graph). If the same key is present in another collection, the value for that key will be the value it has in the last collection listed (updated). Note: Makes a copy of the estimates and solver data so that there is no coupling between graphs.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of solver data operations:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"# Add new VND of type ContinuousScalar to :x0\n# Could also do VariableNodeData(ContinuousScalar())\nvnd = VariableNodeData{ContinuousScalar}()\naddVariableSolverData!(dfg, :x0, vnd, :parametric)\n@show listVariableSolverData(dfg, :x0)\n# Get the data back - note that this is a reference to above.\nvndBack = getVariableSolverData(dfg, :x0, :parametric)\n# Delete it\ndeleteVariableSolverData!(dfg, :x0, :parametric)","category":"page"},{"location":"GraphData/#Small-Data-1","page":"Using Graph Data","title":"Small Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Small data allows you to assign a dictionary to variables. It is a useful way to keep small amounts of string data in a variable. As it is stored in the graph itself, large entries will slow the graph down, so if data should exceed a few bytes/kb, it should rather be saved in bigData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getSmallData\nsetSmallData!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getSmallData","page":"Using Graph Data","title":"DistributedFactorGraphs.getSmallData","text":"getSmallData(v)\n\n\nGet the small data for a variable.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setSmallData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setSmallData!","text":"setSmallData!(v, smallData)\n\n\nSet the small data for a variable. This will overwrite old smallData.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setSmallData!(x0, Dict(\"entry\"=>\"entry value\"))\ngetSmallData(x0)","category":"page"},{"location":"GraphData/#Big-Data-1","page":"Using Graph Data","title":"Big Data","text":"","category":"section"},{"location":"GraphData/#Factors-1","page":"Using Graph Data","title":"Factors","text":"","category":"section"},{"location":"GraphData/#Graph-Related-Data-1","page":"Using Graph Data","title":"Graph-Related Data","text":"","category":"section"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"DFG can store data in the graph itself (as opposed to inside graph elements). When you retrieve graphs from a database, this information is carried along. If you are working with an in-memory graph, the structure is flattened into the graph itself as userData, robotData, and sessionData.","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Graphs reside inside a hierarchy made up in the following way:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"User1\nRobot1\nSession1 (the graph itself)\nUser2\nRobot2\nRobot3\nSession2\nSession3","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"This data can be retrieved with the follow functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"getUserData\ngetRobotData\ngetSessionData","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.getUserData","page":"Using Graph Data","title":"DistributedFactorGraphs.getUserData","text":"getUserData(dfg)\n\n\nGet the user data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getRobotData","page":"Using Graph Data","title":"DistributedFactorGraphs.getRobotData","text":"getRobotData(dfg)\n\n\nGet the robot data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.getSessionData","page":"Using Graph Data","title":"DistributedFactorGraphs.getSessionData","text":"getSessionData(dfg)\n\n\nGet the session data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"It can be set using the following functions:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setUserData!\nsetRobotData!\nsetSessionData!","category":"page"},{"location":"GraphData/#DistributedFactorGraphs.setUserData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setUserData!","text":"setUserData!(dfg, data)\n\n\nSet the user data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setRobotData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setRobotData!","text":"setRobotData!(dfg, data)\n\n\nSet the robot data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#DistributedFactorGraphs.setSessionData!","page":"Using Graph Data","title":"DistributedFactorGraphs.setSessionData!","text":"setSessionData!(dfg, data)\n\n\nSet the session data associated with the graph.\n\n\n\n\n\n","category":"function"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"Example of using graph-level data:","category":"page"},{"location":"GraphData/#","page":"Using Graph Data","title":"Using Graph Data","text":"setUserData!(dfg, Dict(:a => \"Hello\"))\ngetUserData(dfg)","category":"page"},{"location":"variables_and_factors/#Variables-and-Factors-1","page":"Variables and Factors","title":"Variables and Factors","text":"","category":"section"},{"location":"ref_api/#Common-API-Interface-1","page":"Common API Interface","title":"Common API Interface","text":"","category":"section"},{"location":"ref_api/#","page":"Common API Interface","title":"Common API Interface","text":"(Image: imgs/CoreAPI.png)","category":"page"},{"location":"getting_started/#Getting-Started-1","page":"Introduction","title":"Getting Started","text":"","category":"section"},{"location":"TraversingAndQuerying/#Traversing-and-Querying-a-Graph-1","page":"Traversing and Querying","title":"Traversing and Querying a Graph","text":"","category":"section"},{"location":"TraversingAndQuerying/#","page":"Traversing and Querying","title":"Traversing and Querying","text":"getNeighbors\ngetSubgraphAroundNode\ngetSubgraph\ngetBiadjacencyMatrix","category":"page"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getNeighbors","page":"Traversing and Querying","title":"DistributedFactorGraphs.getNeighbors","text":"getNeighbors(dfg, label; solvable)\n\n\nRetrieve a list of labels of the immediate neighbors around a given variable or factor specified by its label.\n\n\n\n\n\n","category":"function"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getSubgraphAroundNode","page":"Traversing and Querying","title":"DistributedFactorGraphs.getSubgraphAroundNode","text":"getSubgraphAroundNode(dfg, node)\ngetSubgraphAroundNode(dfg, node, distance)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors)\ngetSubgraphAroundNode(dfg, node, distance, includeOrphanFactors, addToDFG; solvable)\n\n\nRetrieve a deep subgraph copy around a given variable or factor. Optionally provide a distance to specify the number of edges should be followed. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables. Note: Always returns the node at the center, but filters around it if solvable is set.\n\n\n\n\n\n","category":"function"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getSubgraph","page":"Traversing and Querying","title":"DistributedFactorGraphs.getSubgraph","text":"getSubgraph(dfg, variableFactorLabels)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors)\ngetSubgraph(dfg, variableFactorLabels, includeOrphanFactors, addToDFG)\n\n\nGet a deep subgraph copy from the DFG given a list of variables and factors. Optionally provide an existing subgraph addToDFG, the extracted nodes will be copied into this graph. By default a new subgraph will be created. Note: By default orphaned factors (where the subgraph does not contain all the related variables) are not returned. Set includeOrphanFactors to return the orphans irrespective of whether the subgraph contains all the variables.\n\n\n\n\n\n","category":"function"},{"location":"TraversingAndQuerying/#DistributedFactorGraphs.getBiadjacencyMatrix","page":"Traversing and Querying","title":"DistributedFactorGraphs.getBiadjacencyMatrix","text":"getBiadjacencyMatrix(dfg; solvable)\n\n\nGet a matrix indicating adjacency between variables and factors. Returned as a named tuple: B::SparseMatrixCSC{Int}, varLabels::Vector{Symbol) facLabels::Vector{Symbol). Rows are the factors, columns are the variables, with the corresponding labels in varLabels,facLabels.\n\n\n\n\n\n","category":"function"},{"location":"#Introduction-1","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DistributedFactorGraphs.jl provides a flexible factor graph API for use in the Caesar.jl ecosystem. The package supplies:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A standardized API for interacting with factor graphs\nImplementations of the API for in-memory and database-driven operation\nVisualization extensions to validate the underlying graph","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Note this package is still under initial development, and will adopt parts of the functionality currently contained in IncrementalInference.jl.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"DistributedFactorGraphs can be installed from Julia packages using:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]add DistributedFactorGraphs","category":"page"},{"location":"#Manual-Outline-1","page":"Home","title":"Manual Outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\"\n    \"getting_started.md\"\n    \"variables_and_factors.md\"\n    \"ref_api.md\"\n    \"example.md\"\n    \"func_ref.md\"\n]","category":"page"},{"location":"example/#Example-1","page":"Example","title":"Example","text":"","category":"section"}]
}
